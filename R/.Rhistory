if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1 <- function(x = 1, y = 2, z = 3){
x * y + z
}
tester_2 <- function(x = 1, y = 2, z = 3){
x_default <- default_arg(x) # this would evaluate to 1
if(x < x_default) {
stop(paste("x should be greater or equal to default value:", x_default))
}
x * y + z
}
default_arg(x, tester_1) # 1
default_arg(y, tester_1) # 2
default_arg(z, tester_1) # 3
tester_2()
tester_1(x = 2, y = 1, z = default_arg())
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1 <- function(x = 1, y = 2, z = 3){
x * y + z
}
tester_2 <- function(x = 1, y = 2, z = 3){
x_default <- default_arg(x) # this would evaluate to 1
if(x < x_default) {
stop(paste("x should be greater or equal to default value:", x_default))
}
x * y + z
}
default_arg(x, tester_1) # 1
default_arg(y, tester_1) # 2
default_arg(z, tester_1) # 3
tester_2() # 5
tester_1(x = 2, y = 1, z = default_arg()) # 5
tester_1(x = 2, y = 1, z = default_arg()) # 5
tester_1(x = 2, y = default_arg(), z = 3) # 5
tester_1(x = default_arg(), y = 1, z = 3) # 5
if(sum(c(x,y,z) != c(x_default, y_default, z_default))) {
stop(paste("x should be greater or equal to default value:", x_default))
}
if(sum(c(x,y,z) != c(x_default, y_default, z_default))) {
stop(paste("x should be greater or equal to default value:", x_default))
}
tester_2 <- function(x = 1, y = 2, z = 3){
x_default <- default_arg(x)
y_default <- default_arg(y)
z_default <- default_arg(z)
if(sum(c(x,y,z) != c(x_default, y_default, z_default))) {
stop(paste("x should be greater or equal to default value:", x_default))
}
x * y + z
}
tester_2() # 5
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]; message(func)
variable = names(which(val == "default_arg()")); message(variable)
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1(x = 2, y = 1, z = default_arg()) # 5
tester_1(x = 2, y = default_arg(), z = 3) # 5
tester_1(x = default_arg(), y = 1, z = 3) # 5
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]; message(func)
variable = names(which(val == "default_arg()")); message(variable)
message(formals(func))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
default_arg(x, tester_1) # 1
default_arg(y, tester_1) # 2
default_arg(z, tester_1) # 3
tester_2() # 5
tester_1(x = 2, y = 1, z = default_arg()) # 5
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]; print(func)
variable = names(which(val == "default_arg()")); print(variable)
print(formals(func))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1(x = 2, y = 1, z = default_arg()) # 5
tester_1(x = 2, y = default_arg(), z = 3) # 5
par = list(x = 1, y = 2, z = 3)
par[[x]]
par[["x"]]
par[["y"]]
par[["z"]]
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]; print(func)
variable = names(which(val == "default_arg()")); print(variable)
print(formals(func))
print(formals(func)[[variable]])
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1(x = 2, y = 1, z = default_arg()) # 5
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
print(formals(func)[[variable]])
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1(x = 2, y = 1, z = default_arg()) # 5
tester_1(x = 2, y = default_arg(), z = 3) # 5
tester_1(x = default_arg(), y = 1, z = 3) # 5
tester_1 <- function(x = 1, y = 2, z = 3){
print(list(x = x, y = y, z = z))
x * y + z
}
tester_1(x = 2, y = 1, z = default_arg()) # 5
tester_1(x = 2, y = default_arg(), z = 3) # 5
tester_1(x = 1, y = 2, z = default_arg()) # 5
tester_1(x = 1, y = default_arg(), z = 3) # 5
tester_1(x = default_arg(), y = 2, z = 3) # 5
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1 <- function(x = 1, y = 2, z = 3){
x * y + z
}
tester_2 <- function(x = 1, y = 2, z = 3){
x_default <- default_arg(x)
y_default <- default_arg(y)
z_default <- default_arg(z)
if(sum(c(x,y,z) != c(x_default, y_default, z_default))) {
stop(paste("x should be greater or equal to default value:", x_default))
}
x * y + z
}
default_arg(x, tester_1) # 1
default_arg(y, tester_1) # 2
default_arg(z, tester_1) # 3
tester_2() # 5
tester_1(x = 1, y = 2, z = default_arg()) # 5
tester_1(x = 1, y = default_arg(), z = 3) # 5
tester_1(x = default_arg(), y = 2, z = 3) # 5
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1 <- function(x = 1, y = 2, z = 3) {
x * y + z
}
tester_2 <- function(x = 1, y = 2, z = 3) {
x_default <- default_arg(x) # this would evaluate to 1
if(x < x_default) {
stop(paste("x should be greater or equal to default value:", x_default))
}
x * y + z
}
default_arg(x, tester_1) # 1
default_arg(y, tester_1) # 2
default_arg(z, tester_1) # 3
tester_2() # 5
tester_1(x = 1, y = 2, z = default_arg()) # 5
tester_1(x = 1, y = default_arg(), z = 3) # 5
tester_1(x = default_arg(), y = 2, z = 3) # 5
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1 <- function(x = 1, y = 2, z = 3) {
x * y + z
}
default_arg(x, tester_1) # this would evaluate to 1
tester_2 <- function(x = 1, y = 2, z = 3) {
x_default <- default_arg(x) # this would evaluate to 1
if(x < x_default) {
stop(paste("x should be greater or equal to default value:", x_default))
}
x * y + z
}
tester_1 <- function(x = 1, y = 2, z = 3) {
x * y + z
}
tester_2 <- function(x = 1, y = 2, z = 3) {
x_default <- default_arg(x) # this would evaluate to 1
if(x < x_default) {
stop(paste("x should be greater or equal to default value:", x_default))
}
x * y + z
}
default_arg(x, tester_1) # 1
default_arg(y, tester_1) # 2
default_arg(z, tester_1) # 3
tester_2() # 5
tester_1(x = 1, y = 2, z = default_arg()) # 5
tester_1(x = 1, y = default_arg(), z = 3) # 5
tester_1(x = default_arg(), y = 2, z = 3) # 5
sum(1:10)
sum(0:10)
median(0:10)
max(0:10)*median(0:10) + median(0:10)
sum(0:10)
sum(0:100)
max(0:100)*median(0:100) + median(0:100)
n = 98
sum(0:n)
max(0:n)*median(0:n) + median(0:n)
n = 54
sum(0:n)
max(0:n)*median(0:n) + median(0:n)
n = 55
sum(0:n)
max(0:n)*median(0:n) + median(0:n)
n = 57
sum(0:n)
max(0:n)*median(0:n) + median(0:n)
n = 123
sum(0:n)
max(0:n)*median(0:n) + median(0:n)
if(require(minfiData)) {
gapres <- gaphunter(MsetEx, threshold=0.3, keepOutliers=TRUE)
#Note: the threshold argument is increased from the default value in this small example
#dataset with 6 people to avoid the reporting of a large amount of probes as gap signals.
#In a typical EWAS setting with hundreds of samples, the default arguments should be
#sufficient.
}
BiocManager::install("minfiData")
if(require(minfiData)) {
gapres <- gaphunter(MsetEx, threshold=0.3, keepOutliers=TRUE)
#Note: the threshold argument is increased from the default value in this small example
#dataset with 6 people to avoid the reporting of a large amount of probes as gap signals.
#In a typical EWAS setting with hundreds of samples, the default arguments should be
#sufficient.
}
head(gapres)
head(MsetEx)
head(getBeta(MsetEx))
x = rbeta(100, 1, 1)
y = rbeta(100, 1, 1)
X = rbind(x,y)
X
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
x = rbeta(50, 1, 1)
y = rbeta(50, 1, 1)
X = rbind(x,y)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
plot(density(x))
plot(density(y))
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
x = rbeta(5, 1, 1)
y = rbeta(5, 1, 1)
X = rbind(x,y)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
x = rbeta(5, 1, 1)
y = rbeta(5, 1, 1)
X = rbind(x,y)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
x = rbeta(5, 1, 1)
y = rbeta(5, 1, 1)
X = rbind(x,y)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
x = rbeta(5, 1, 1)
y = rbeta(5, 1, 1)
X = rbind(x,y)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
x = rbeta(5, 1, 1)
y = rbeta(5, 1, 1)
X = rbind(x,y)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
x = rbeta(5, 1, 1)
y = rbeta(5, 1, 1)
X = rbind(x,y)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
x = rbeta(5, 1, 1)
y = rbeta(5, 1, 1)
X = rbind(x,y)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
x = rbeta(5, 1, 1)
y = rbeta(5, 1, 1)
X = rbind(x,y)
gaphunter(X, threshold=0.3, keepOutliers=TRUE)
sessionInfo()
BiocManager::install(minfi)
BiocManager::install("minfi")
sessionInfo()
library(minfi)
fc <- function(x){exp(rnorm(x, log(2), 0.5*log(2)))}
fc(10)
fc <- function(x){exp(rnorm(x, log(2), 0.5*log(2)))}
fc <- function(x){exp(rnorm(x, log(2), 0.5*log(2)))}
fc
fc(100)
log(2)
plot(density(fc(1000)))
help(rlnorm)
library(modes)
library(plotly)
estBetaParams <- function(mu, var)
{
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = c(alpha, beta))
}
Simulation <- function(n, alpha, mu1, mu2, sd)
{
shape_A <- estBetaParams(mu1, sd^2)
shape_B <- estBetaParams(mu2, sd^2)
BC = replicate(1000,
{
x = rbeta(ceiling(n*alpha), shape_A[1], shape_A[2])
y = rbeta(floor(n*(1-alpha)), shape_B[1], shape_B[2])
bimodality_coefficient(c(x,y))
})
mean(BC)
}
#########################
n = 426
alpha = 0.5
mu1 = 0.5
mu2 = 0.5
sd = 0.05
Simulation(n, alpha, mu1, mu2, sd)
# Define all conditions
n = 426*2
sd = 0.05
x = seq(0.1, 0.9, 0.1)
X = diag(x)
indices = which(upper.tri(X), arr.ind = T)
conditions = lapply(1:nrow(indices), function(y) c(x[indices[y, 1]], x[indices[y, 2]]))
conditions = Reduce(rbind, conditions)
colnames(conditions) = c("mu1", "mu2")
rownames(conditions) = NULL
conditions = as.data.frame(conditions)
conditions$n = n
conditions$sd = sd
alpha = seq(0.05, 0.95, 0.05)
cond_list = lapply(1:length(alpha), function(x) conditions)
conditions = Reduce(rbind, cond_list)
conditions$alpha = rep(alpha, each = 6)
conditions$res = NA
dim(conditions) # 684   6
# Run simulation for all conditions
for(i in 1:nrow(conditions))
{
conditions$res[i] <- Simulation(n = conditions$n[i], alpha = conditions$alpha[i],
mu1 = conditions$mu1[i], mu2 = conditions$mu2[i],
sd = conditions$sd[i])
print(i)
}
# Append columns
conditions$delta = conditions$mu2 - conditions$mu1
conditions$col = conditions$res > 5/9
fig <- plot_ly(x = ~delta, y = ~alpha, z = ~res, color = ~col, data = conditions, size = 1,
alpha = 1)
fig
library(devtools)
library(roxygen2)
setwd("/home/ben/Documents/Git/UMtools/")
document()
help(GR_to_UM)
setwd("/home/ben/Documents/Git/UMtools/")
document()
help(GR_to_UM)
setwd("/home/ben/Documents/Git/UMtools/")
document()
help(GR_to_UM)
setwd("/home/ben/Documents/Git/UMtools/")
document()
help(GR_to_UM)
setwd("/home/ben/Documents/Git/UMtools/")
document()
help(GR_to_UM)
setwd("/home/ben/Documents/Git/UMtools/")
document()
help(GR_to_UM)
setwd("/home/ben/Documents/Git/UMtools/")
document()
help(GR_to_UM)
setwd("/home/ben/Documents/Git/UMtools/")
document()
help(GR_to_UM)
setwd("/home/ben/Documents/Git/UMtools/")
document()
help(GR_to_UM)
setwd("/home/ben/Documents/Git/UMtools/")
document()
help(GR_to_UM)
setwd("/home/ben/Documents/Git/UMtools/")
document()
setwd("/home/ben/Documents/Git/UMtools/")
document()
setwd("/home/ben/Documents/Git/UMtools/R/")
list.files
list.files()
