conditions = Reduce(rbind, cond_list)
conditions$alpha = rep(alpha, each = 6)
conditions$res = NA
dim(conditions) # 684   6
# Run simulation for all conditions
for(i in 1:nrow(conditions))
{
conditions$res[i] <- Simulation(n = conditions$n[i], alpha = conditions$alpha[i],
mu1 = conditions$mu1[i], mu2 = conditions$mu2[i],
sd = conditions$sd[i])
print(i)
}
# Append columns
conditions$delta = conditions$mu2 - conditions$mu1
conditions$col = conditions$res > 5/9
fig <- plot_ly(x = ~delta, y = ~alpha, z = ~res, color = ~col, data = conditions, size = 1,
alpha = 1)
fig
x = data.frame(id = c(1,2), col1 = c("text---here","text---there"))
levels = unique(unlist(strsplit(x$col1, split = "---")))
x = cbind(x, matrix(ncol = length(levels), nrow = nrow(x)))
for(i in 1:length(levels))
{
x[,ncol(x)-length(levels)+i] <- as.numeric(grepl(levels[i], x$col1, fixed = TRUE))
}
x
colnames(x) <- c("id", "col1", levels)
x
x = data.frame(id = c(1,2), col1 = c("text---here","text---there"))
levels = unique(unlist(strsplit(x$col1, split = "---")))
x = cbind(x, matrix(ncol = length(levels), nrow = nrow(x)))
for(i in 1:length(levels))
{
x[,ncol(x)-length(levels)+i] <- as.numeric(grepl(levels[i], x$col1, fixed = TRUE))
}
x = data.frame(id = c(1,2), col1 = c("text---here","text---there"))
levels = unique(unlist(strsplit(x$col1, split = "---")))
x = data.frame(id = c(1,2), col1 = c("text---here","text---there"))
x
levels = unique(unlist(strsplit(x$col1, split = "---")))
x
x$col1
x = data.frame(id = c(1,2), col1 = c("text---here","text---there"))
levels = unique(unlist(strsplit(as.vector(x$col1), split = "---")))
levels
x = cbind(x, matrix(ncol = length(levels), nrow = nrow(x)))
for(i in 1:length(levels))
{
x[,ncol(x)-length(levels)+i] <- as.numeric(grepl(levels[i], x$col1, fixed = TRUE))
}
colnames(x) <- c("id", "col1", levels)
x
x
x = data.frame(id = c(1,2), col1 = c("text---here","text---there"))
levels = unique(unlist(strsplit(as.vector(x$col1), split = "---")))
x = cbind(x, matrix(ncol = length(levels), nrow = nrow(x)))
for(i in 1:length(levels))
{
x[,ncol(x)-length(levels)+i] <- as.numeric(grepl(levels[i], x$col1, fixed = TRUE))
}
colnames(x) <- c("id", "col1", levels)
x
x = data.frame(id = c(1,2), col1 = c("text---here","text---there"))
levels = unique(unlist(strsplit(as.vector(x$col1), split = "---")))
levels
x = cbind(x, matrix(ncol = length(levels), nrow = nrow(x)))
for(i in 1:length(levels))
{
x[,ncol(x)-length(levels)+i] <- as.numeric(grepl(levels[i], x$col1, fixed = TRUE))
}
x
colnames(x) <- c("id", "col1", levels)
x
ncol(x)
i = 2
x[,ncol(x)-length(levels)+i]
x = data.frame(id = c(1,2), col1 = c("text---here","text---there"))
levels = unique(unlist(strsplit(as.vector(x$col1), split = "---")))
x = cbind(x, matrix(ncol = length(levels), nrow = nrow(x)))
i = 2
x[,ncol(x)-length(levels)+i]
as.numeric(grepl(levels[i], x$col1, fixed = TRUE))
x$col1
x$col1 = as.vector(x$col1)
levels = unique(unlist(strsplit(as.vector(x$col1), split = "---")))
x = cbind(x, matrix(ncol = length(levels), nrow = nrow(x)))
for(i in 1:length(levels))
{
i = 2
x[,ncol(x)-length(levels)+i] <- as.numeric(grepl(levels[i], x$col1, fixed = TRUE))
}
colnames(x) <- c("id", "col1", levels)
x
x = data.frame(id = c(1,2), col1 = c("text---here","text---there"))
x$col1 = as.vector(x$col1)
levels = unique(unlist(strsplit(as.vector(x$col1), split = "---")))
levels
x = cbind(x, matrix(ncol = length(levels), nrow = nrow(x)))
for(i in 1:length(levels))
for(i in 1:length(levels))
{
x[,ncol(x)-length(levels)+i] <- as.numeric(grepl(levels[i], x$col1, fixed = TRUE))
}
colnames(x) <- c("id", "col1", levels)
x
levels[i]
i = 2
levels[i]
x$col1
levels[i]
grepl(levels[i], x$col1, fixed = TRUE)
levels[i]
as.numeric(grep(levels[i], x$col1, fixed = TRUE)
)
grepl("a", c("abc", "bc"))
levels[i]
Split = strsplit(as.vector(x$col1), split = "---")
Split
levels = unique(unlist(Split))
levels
x = cbind(x, matrix(ncol = length(levels), nrow = nrow(x)))
x
grepl("a", x)
grepl("a", Split)
Split
grepl("text", Split)
grepl("here", Split)
help(grepl)
x$col1
Split
sapply(Split, function(x) x %in% levels[i])
sapply(Split, function(x) x %in% levels[i])
levels
x
x = data.frame(id = c(1,2), col1 = c("text---here","text---there"))
x$col1 = as.vector(x$col1)
Split = strsplit(as.vector(x$col1), split = "---")
levels = unique(unlist(Split))
x = cbind(x, matrix(ncol = length(levels), nrow = nrow(x)))
x
| c(0,1)
|| c(0,1)
outer(c(0,1))
Split
x[,ncol(x)-length(levels)+i] <- as.numeric(grepl(levels[i], x$col1, fixed = TRUE, pattern = "---"))
as.numeric(grepl(levels[i], x$col1, fixed = TRUE, pattern = "---"))
grepl("ab---bab", "ab")
grepl( "ab", "ab---bab",)
grepl("ab", "ab---bab")
grepl("ab", "ab---bab", pattern = "^---^")
grepl("ab", "ab---bab", pattern = "*---*")
grepl("ab", "ab---bab", pattern = ".---.")
grepl("ab", "ab---bab", pattern = "?---?")
grepl("ab", "ab---bab", pattern = "?[---]?")
grepl("bab", "ab---bab", pattern = "?[---]?")
grepl("b", "ab---bab", pattern = "?[---]?")
grepl("ab", "ab---bab", pattern = "?[---]?")
grepl("bab", "ab---bab", pattern = "?[---]?")
grepl("b", "ab---bab", pattern = "?[---]?")
grepl
help(grepl)
grepl("b", "ab---bab", pattern = "^^")
grepl("b", "ab---bab", pattern = "^[---]^")
grepl("ab", "ab---bab", pattern = "^[---]^")
grepl("bab", "ab---bab", pattern = "^[---]^")
grepl("b", "ab---bab", pattern = "^[---]^")
grepl("^ab[---]^", "ab---bab", pattern = "^[---]^")
ab
"ab"
grepl(pattern = "^ab", x = "ab---bab")
grepl(pattern = c("^ab", "ab^"), x = "ab---bab")
grepl(pattern = c("^ab^"), x = "ab---bab")
grepl(pattern = c("^[---]ab[---]^"), x = "ab---bab")
grepl(pattern = c("^---ab---^"), x = "ab---bab")
grepl(pattern = c("^---ab---^"), x = "ab---bab")
grepl(pattern = c("?{---}ab?{---}"), x = "ab---bab")
grepl(pattern = c("?{---}bab?{---}"), x = "ab---bab")
grepl(pattern = c("?{---}b?{---}"), x = "ab---bab")
grepl(pattern = "?", x = "ab---bab")
grepl(pattern = "a?", x = "ab---bab")
grepl(pattern = "b?", x = "ab---bab")
grepl(pattern = "b{...}?", x = "ab---bab")
grepl(pattern = "b?{b}", x = "ab---bab")
grepl(pattern = "b?{...}", x = "ab---bab")
grepl(pattern = "b?{---}", x = "ab---bab")
grepl(pattern = "b---", x = "ab---bab")
grepl(pattern = "ab---", x = "ab---bab")
grepl(pattern = "---bab", x = "ab---bab")
grepl(pattern = "---bab---", x = "ab---bab")
grepl(pattern = "---bab[---]", x = "ab---bab")
grepl(pattern = "---bab?[---]", x = "ab---bab")
grepl(pattern = "---bab?{---}", x = "ab---bab")
grepl(pattern = "?{---}bab?{---}", x = "ab---bab")
grepl(pattern = "?{---}ab?{---}", x = "ab---bab")
grepl(pattern = "?{---}ab?{---}", x = "a---bab")
Split
Split[[1]]
grepl(pattern = levels[1], x = Split[[1]])
Split[[1]]
levels[1]
grepl(pattern = paste("^", levels[1], "^"), x = Split[[1]])
Split[[1]]
levels[1]
grepl("^text", "text")
grepl("text^", "text")
grepl("text^", "text.")
grepl("text^", "txet")
grepl("a^", "texta")
grepl("text$", "text")
grepl("^text$", "text")
grepl(pattern = paste("^", levels[1], "$"), x = Split[[1]])
Split[[1]]
paste("^", levels[1], "$")
grepl(pattern = paste("^", levels[1], "$", sep = ""), x = Split[[1]])
grepl(pattern = paste("^", levels[1], "$", sep = ""), x = Split[[1]])
levels[2]
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split[[2]])
Split[[2]]
x$col1
Split[[1]]
Split
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split)
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split[[2]])
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split[[1]])
||
grepl("^text$", "text")
||
|
sapply(grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split[[1]]), function(x) x | x)
grepl(pattern = paste("^", levels[2], "$", sep = "")
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split[[1]])
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split[[1]])
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split[[1]])
Split
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split)
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = as.vector(Split))
as.vector(Split)
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = unlist(Split))
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = unlist(Split))
Split
x$col1
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = x$col1)
x$col1
levels[2]
grepl(pattern = "^here$", x = x$col1)
x$col1
grepl(pattern = "^here$", x = x$col1)
grepl(pattern = "^?{...}here?{...}$", x = x$col1)
grepl(pattern = "^?{---}here?{---}$", x = x$col1)
grepl(pattern = "^*{---}here*{---}$", x = x$col1)
grepl(pattern = "^*here*{---}$", x = x$col1)
grepl(pattern = "^*here*$", x = x$col1)
grepl(pattern = "^*here$", x = x$col1)
grepl(pattern = "*here$", x = x$col1)
grepl(pattern = "^here*", x = x$col1)
x$col1
grepl(pattern = "*here?", x = x$col1)
grepl(pattern = "*---here?", x = x$col1)
grepl(pattern = "*---there?", x = x$col1)
Split
levels[i]
sapply(Split, function(x) x == levels[i])
sapply(Split, function(x) max(x == levels[i]))
x = data.frame(id = c(1,2), col1 = c("text---here","text---there")); x$col1 = as.vector(x$col1)
Split = strsplit(as.vector(x$col1), split = "---")
levels = unique(unlist(Split))
x = cbind(x, matrix(ncol = length(levels), nrow = nrow(x)))
for(i in 1:length(levels))
{
x[,ncol(x)-length(levels)+i] <- sapply(Split, function(x) max(x == levels[i]))
}
colnames(x) <- c("id", "col1", levels)
x
x
a = c("Tue Mar 31 13:42:58 +0000 2020", "Sat Mar 14 05:15:56 +0000 2020")
a
as.Date(a[1])
help("as.Date")
as.Date(a[1], format = "%d %m %y")
format(Sys.Date(), "%a %b %d")
as.Date(a[1], format = "%a %d %m %y")
as.Date(a[1], format = "%a %m %d %t %y")
as.Date(a[1], format = "%a %m %d %t %z %y")
Sys.Date()
format(Sys.Date(), "%a %b %d")
as.Date(Sys.Date(), "%a %b %d")
as.Date(Sys.Date(), "%d %a %d")
as.Date(a[1], format = '%a %b %d %H:%M:%S %z %Y')
as.Date(a[1], format = '%a %b %d %H:%M:%S %z %Y')
a[1]
as.Date(a[1], format = '%a %b %d %H:%M:%S %z %Y')
df <- data.frame(created_at=c(
"Tue Mar 31 13:42:58 +0000 2020 Sat Mar 14 05:15:56 +0000 2020",
"Sun Apr 05 14:02:10 +0000 2020 Tue Mar 24 09:06:12 +0000 2020",
"Tue Apr 28 01:14:28 +0000 2020 Thu Oct 24 18:47:10 +0000 2019"))
df$dates = as.Date(df$created_at, format = '%a %b %d %H:%M:%S %z %Y')
df$dates
sin
pryr::show_c_source(.Internal(match.call(definition, call, expand.dots)))
sin
install.package("pryr")
install.packages("pryr")
sin
pryr::show_c_source(.Primitive("sin"))
show_c_source(.Internal(mean(x)))
library(pryr)
show_c_source(.Internal(mean(x)))
mean(x)
mean
.Internal(mean(x))
pryr::show_c_source(.Primitive("sin"))
sin
mean
pryr::show_c_source(.Primitive(sin(x)))
show_c_source(.Internal(mean(x)))
pryr::show_c_source(.Primitive(sin(x)))
pryr::show_c_source(MATH1(sin))
sin
pryr::show_c_source(.Primitive(sin(x)))
sin(0)
matrix(c(1,1,1,0,0,0,1,1,1,0,0,0), nrow = 3, ncol = 2)
matrix(c(2,1,1,0,0,0,1,1,1,0,0,0), nrow = 3, ncol = 2)
matrix(c(2,1,1,0,0,0,1,1,1,0,0,1), nrow = 3, ncol = 2)
matrix(c(2,1,1,0,0,0,1,1,1,0,0,1), nrow = 3, ncol = 2)
matrix(c(2,1,1,0,0,1), nrow = 3, ncol = 2)
A = matrix(c(2,1,1,0,0,1), nrow = 3, ncol = 2)
image(A)
mtcars$hp2 = mtcars$hp^2
mod1 <- lm(log(mpg) ~ cyl + wt + vs*hp + vs*hp2, data = mtcars)
summary(mod1) # With this you can check that the model you specified is what you want
(marg1 <- margins(mod1)) # The error disappeared.
summary(marg1)
library(margins)
mtcars$hp2 = mtcars$hp^2
mod1 <- lm(log(mpg) ~ cyl + wt + vs*hp + vs*hp2, data = mtcars)
summary(mod1) # With this you can check that the model you specified is what you want
(marg1 <- margins(mod1)) # The error disappeared.
library(margins)
install.packages("margin")
library(minfi)
library(ggplot2)
library(reshape2)
###################################  450K  ###########################################
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
annotation <- getAnnotation(IlluminaHumanMethylation450kanno.ilmn12.hg19)
annot = as.data.frame(annotation[,1:3])
annot = annot[order(annot$chr, annot$pos),]
chr = unique(annot$chr)
annot_list = lapply(chr, function(x) annot[annot$chr %in% x,])
names(annot_list) = chr
for(i in 1:length(annot_list))
{
annot_list[[i]]$delta = c(NA, diff(annot_list[[i]]$pos))
}
annot = Reduce(rbind, annot_list)
annot$delta_log10 = log10(annot$delta)
ggplot(annot, aes(x=chr, y=delta_log10, fill = chr)) +
geom_boxplot() + geom_abline(intercept = log10(500), slope = 0, lty = 2, col = "black", alpha = 0.5) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
plot(density(na.omit(annot$delta_log10)))
abline(v = log10(500))
# Simulation
set = na.omit(annot$delta_log10)
res = replicate(1000000,
{
i = sample(1:length(set), 1)
sum(set[i:(i+1)] < log10(500))
})
table(res)
#      0      1      2
# 290972 261244 447781
# P(X >= 1)
1 - table(res)[["0"]]/length(res) # 0.709028
set.seed(1)
res = replicate(1000000,
{
i = sample(1:length(set), 1)
sum(set[i:(i+1)] < log10(500))
})
table(res)
set.seed(1)
res = replicate(1000000,
{
i = sample(1:length(set), 1)
sum(set[i:(i+1)] < log10(500))
})
table(res)
#      0      1      2
# 290972 261244 447781
# P(X >= 1)
1 - table(res)[["0"]]/length(res) # 0.709028
table(res)[["2"]]/length(res) # 0.708404
set = na.omit(annot$delta_log10)
set.seed(1)
res = replicate(1000000,
{
i = sample(1:length(set), 1)
sum(set[i:(i+1)] <= log10(500))
})
table(res)
#      0      1      2
# 290972 261244 447781
# P(X >= 1)
1 - table(res)[["0"]]/length(res) # 0.708404
table(res)[["2"]]/(table(res)[["2"]] + table(res)[["3"]]) # 0.708404
table(res)[["2"]]
(table(res)[["2"]]
table(res)[["2"]]
table(res)[["2"]]
table(res)[["3"]]
table(res)[["2"]]/(table(res)[["2"]] + table(res)[["1"]]) # 0.708404
table(res)[["2"]]
table(res)[["2"]]
ggplot(annot, aes(x=chr, y=delta_log10, fill = chr)) +
geom_boxplot() + geom_abline(intercept = log10(500), slope = 0, lty = 2, col = "black", alpha = 0.5) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(minfi)
library(ggplot2)
library(reshape2)
library(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
data(Locations)
dim(Locations) # 865859      3
annot = as.data.frame(Locations)
annot = annot[order(annot$chr, annot$pos),]
chr = unique(annot$chr)
annot_list = lapply(chr, function(x) annot[annot$chr %in% x,])
names(annot_list) = chr
for(i in 1:length(annot_list))
{
annot_list[[i]]$delta = c(NA, diff(annot_list[[i]]$pos))
}
annot = Reduce(rbind, annot_list)
annot$delta_log10 = log10(annot$delta)
ggplot(annot, aes(x=chr, y=delta_log10, fill = chr)) +
geom_boxplot() + geom_abline(intercept = log10(500), slope = 0, lty = 2, col = "black", alpha = 0.5) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Simulation
set = na.omit(annot$delta_log10)
# Simulation
length(set)
set.seed(2)
res = replicate(1000000,
{
i = sample(1:length(set), 1)
sum(set[i:(i+1)] <= log10(500))
})
table(res)
# P(X >= 1)
1 - table(res)[["0"]]/length(res) # 0.641513
table(res)[["2"]]/(table(res)[["2"]] + table(res)[["1"]]) # 0.6311917
CpGs = c("cg26371957", "cg14911689", "cg26654770", "cg01201512")
library(FlowSorted.Blood.450k) # Reinius
library(FlowSorted.CordBlood.450k) # Babulski
library(FlowSorted.CordBloodNorway.450k) # Gerwin
library(gplots)
library(RColorBrewer)
library(minfi)
pheno1 <- colData(FlowSorted.Blood.450k)
pheno2 <- colData(FlowSorted.CordBlood.450k)
pheno3 <- colData(FlowSorted.CordBloodNorway.450k)
dim(pheno1)
pheno1
table(pheno2$Sex)
pheno1
strsplit(pheno1$Sample_Name, split = "_")
sapply(strsplit(pheno1$Sample_Name, split = "_"), function(x) x[2])
table(sapply(strsplit(pheno1$Sample_Name, split = "_"), function(x) x[2])))
table(sapply(strsplit(pheno1$Sample_Name, split = "_"), function(x) x[2]))))
table(sapply(strsplit(pheno1$Sample_Name, split = "_"), function(x) x[2]))
pheno2
pheno2$Individual.ID
table(pheno2$Individual.ID)
pheno3
pheno3$SampleID
table(pheno3$SampleID)
dim(pheno1)
dim(pheno2)
dim(pheno3)
dim(pheno)
pheno = data.frame(cell.type = c(pheno1$CellType, as.character(pheno2$CellType), pheno3$CellType),
sex = c(pheno1$Sex, pheno2$Sex, pheno3$Sex),
ID = c(pheno1$SampleID, as.vector(pheno2$Individual.ID), pheno3$SampleID))
RGSET = Reduce(f = combineArrays, list(FlowSorted.Blood.450k, FlowSorted.CordBlood.450k, FlowSorted.CordBloodNorway.450k))
dim(pheno)
RGSET
library(UMtools)
data("annot_450K")
data(training_set)
data(annot_450K)
data(annot_EPIC)
data(classification_CpG_SNP_450K)
data(classification_CpG_SNP_EPIC)
data(CR_probes)
data(triallelic_CpG_SNP_450K)
data(triallelic_CpG_SNP_EPIC)
data(training_set)
data(training_set)
setwd("/home/ben/Documents/Git/UMtools/data/")
load("training_set.Rdata")
training_set
data(training_set)
remove.packages("UMtools")
library(devtools)
library(roxygen2)
setwd("/home/ben/Documents/Git/UMtools/")
document()
setwd("/home/ben/Documents/Git/UMtools/")
document()
library(devtools)
library(roxygen2)
setwd("/home/ben/Documents/Git/UMtools/")
document()
