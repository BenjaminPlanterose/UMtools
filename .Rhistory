plot(dens, main = "", xlab = deparse(substitute(mat)))
points(x = mat[CpG,], y = rnorm(ncol(mat), mu, sd), pch = 19)
}
else if(!is.null(sex))
{
col = as.factor(sex)
levels(col) = c("deeppink2", "dodgerblue1")
col = as.character(col)
plot(dens, main = "", xlab = deparse(substitute(mat)))
points(x = mat[CpG,], y = rnorm(ncol(mat), mu, sd), col = alpha(col, alpha), pch = 19)
}
}
#
bGMM <- function(M, U, CpG, K)
{
df = as.data.frame(cbind(M[CpG,], U[CpG, ]))
colnames(df) <- c('x', 'y')
ret <- init.EM(df, nclass = K, method = 'em.EM', min.n.iter = 2000)
class_i <- assign.class(df, ret, return.all = FALSE)$class
if(K == 1 | K > 4)
{
plot(df$x, df$y, col = as.factor(class_i), pch = 19, main = CpG, xlab = 'M', ylab = 'U',
xlim = c(0, max(df$x) + 100), ylim = c(0, max(df$y) + 100))
return(as.factor(class_i))
}
else if(K == 2)
{
coefA = aggregate(.~class_i, df[c("x")], mean)$x
coefB = aggregate(.~class_i, df[c("y")], mean)$y
pos1 = which.min((coefA + coefB)/2); pos2 = which.max((coefA + coefB)/2);
real_order <- c(pos1, pos2)
class_i <- factor(class_i, levels = c(1,2,3,4))
levels(class_i) <- as.character(match(1:4, real_order))
col_vec <- as.vector(class_i); out = col_vec
col_vec[col_vec == '1'] <- alpha('dodgerblue3', 0.5); col_vec[col_vec == '2'] <- alpha('brown3', 0.5)
out[out == '1'] <- "blue"; out[out == '2'] <- "red"
plot(df$x, df$y, col = col_vec, pch = 19, main = CpG, xlab = 'M', ylab = 'U',
xlim = c(0, max(df$x) + 100), ylim = c(0, max(df$y) + 100))
return(out)
}
else if(K == 3)
{
coefs <- numeric()
lm.mod <- lm(df$y[class_i == 1] ~ df$x[class_i == 1]); coefs[1] <- unname(lm.mod$coefficients[2])
lm.mod <- lm(df$y[class_i == 2] ~ df$x[class_i == 2]); coefs[2] <- unname(lm.mod$coefficients[2])
lm.mod <- lm(df$y[class_i == 3] ~ df$x[class_i == 3]); coefs[3] <- unname(lm.mod$coefficients[2])
class_i <- factor(class_i, levels = c(1,2,3))
levels(class_i) <- as.character(match(1:3, order(coefs, decreasing = T)))
col_vec <- as.vector(class_i); out = col_vec
col_vec[col_vec == '1'] <- alpha('dodgerblue3', 0.5)
col_vec[col_vec == '2'] <- alpha('darkmagenta', 0.5)
col_vec[col_vec == '3'] <- alpha('brown3', 0.5)
out[out == '1'] <- "blue"; out[out == '2'] <- "purple"; out[out == '3'] <- "red"
plot(df$x, df$y, col = col_vec, pch = 19, main = CpG, xlab = 'M', ylab = 'U',
xlim = c(0, max(df$x) + 100), ylim = c(0, max(df$y) + 100))
return(out)
}
else if(K == 4)
{
df_norm = df/data.frame(x = rep(max(df$x), nrow(df)), y = rep(max(df$y), nrow(df)))
df_norm$label = class_i
coefA = aggregate(. ~ label, df_norm[c("x", "label")], mean)$x
coefB = aggregate(. ~ label, df_norm[c("y", "label")], mean)$y
pos1 = which.min((coefA + coefB)/2); coefA[pos1] = NA; coefB[pos1] = NA;
pos4 = which.min(abs(coefA - coefB)); coefA[pos4] = NA; coefB[pos4] = NA;
pos2 = which.max(coefB); pos3 = which.max(coefA)
real_order <- c(pos1, pos2, pos3, pos4)
class_i <- factor(class_i, levels = c(1,2,3,4))
levels(class_i) <- as.character(match(1:4, real_order))
col_vec <- as.vector(class_i); out = col_vec
col_vec[col_vec == '1'] <- alpha('black', 0.5)
col_vec[col_vec == '2'] <- alpha('dodgerblue3', 0.5)
col_vec[col_vec == '3'] <- alpha('brown3', 0.5)
col_vec[col_vec == '4'] <- alpha('darkmagenta', 0.5)
out[out == '1'] <- "blue"; out[out == '2'] <- "purple"; out[out == '3'] <- "red"; out[out == '4'] <- "red"
plot(df$x, df$y, col = col_vec, pch = 19, main = CpG, xlab = 'M', ylab = 'U',
xlim = c(0, max(df$x) + 100), ylim = c(0, max(df$y) + 100))
return(out)
}
}
#
Kcall_CpG <- function(CpG, M, U, minPts = 25, plot = T, reach = seq(0.328, 0.352, 0.004), R = 2)
{
x = M[CpG,]
y = U[CpG,]
alpha1 = IQR(x)/R
alpha2 = IQR(y)/R
df = data.frame(x = log2(x + alpha1), y = log2(y + alpha2))
df = as.data.frame(scale(df, center = T, scale = T))
if(plot)
{
db <- dbscan::dbscan(x = df, eps = mean(reach), minPts)
plot(df$x, df$y, col = as.factor(db$cluster), pch = 19, main = CpG)
}
res = lapply(X = reach, FUN = function(x) fpc::dbscan(df, eps = x, minPts)$cluster)
res = lapply(res, table)
res = lapply(res, function(x) x[names(x) != "0"])
res = sapply(res, length)
nclust = min(as.numeric(res))
return(nclust)
}
# Read IDAT files
setwd("/media/ben/DATA/Ben/1_evCpGs/data/aging_children/GSE104812_RAW/")
rgSet = read.metharray.exp(getwd(), extended = T)
Grn = assay(rgSet, "Green") # Green mean across beads
Red = assay(rgSet, "Red") # Red mean across beads
GrnSD = assay(rgSet, "GreenSD") # Green SD across beads
RedSD = assay(rgSet, "RedSD") # Red SD across beads
# Convert from GR to MU (from probes to CpGs)
M_U = GR_to_UM(Red, Grn, rgSet)
M_U_sd = GR_to_UM(RedSD, GrnSD, rgSet)
# Extracting phenotypes from GEO
setwd('/media/ben/DATA/Ben/1_evCpGs/data/aging_children/GSE104812_RAW/')
pheno_object <- getGEO('GSE104812', destdir=".", getGPL = FALSE)
pheno <- pheno_object[[1]]
pheno <- phenoData(pheno)
pheno <- pData(pheno)
pheno = data.frame(GEO_ID = as.character(rownames(pheno)),
sex = as.factor(pheno$`gender:ch1`),
age = as.numeric(pheno$`age (y):ch1`))
IDAT_IDs = sapply(strsplit(colnames(rgSet), split = "_"),function(x) x[1])
pheno <- pheno[match(pheno$GEO_ID, IDAT_IDs),] # Make sure samples in pheno are in the same order as in IDATs
pheno
### Functionalities from UMtools
# 1) U/M-plots
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00050873", sex = pheno$sex)
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00026186", sex = pheno$sex)
### Functionalities from UMtools
# 1) U/M-plots
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00050873", sex = pheno$sex)
setwd("/home/ben/Documents/Git/UMtools/img/")
# 2) CV jitter plots
# Compute CV per CpG and per sample
CV = compute_cv(M_U_sd$M, M_U_sd$U, M_U$M, M_U_sd$U)
gc()
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00214611", pheno$sex)
density_jitter_plot(CV, "cg02839557", pheno$sex)
density_jitter_plot(CV, "cg05544622", pheno$sex)
density_jitter_plot(beta_value, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
# Compute beta-value and quickly normalize
beta_value = M_U$M/(M_U$M + M_U$U + 100)
beta_value = normalize.quantiles(beta_value)
gc()
# Compute beta-value and quickly normalize
beta_value = M_U$M/(M_U$M + M_U$U + 100)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(beta_value, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(beta_value, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(beta_value, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(beta_value, "cg00050873", pheno$sex)
#
density_jitter_plot <- function(mat, CpG, sex = NULL, alpha = 0.5, lambda = 0.05)
{
dens = density(mat[CpG,])
mu = median(dens$y)
sd = diff(quantile(dens$y, c(0.5-lambda, 0.5 + lambda)))
if(is.null(sex))
{
plot(dens, main = CpG, xlab = deparse(substitute(mat)))
points(x = mat[CpG,], y = rnorm(ncol(mat), mu, sd), pch = 19)
}
else if(!is.null(sex))
{
col = as.factor(sex)
levels(col) = c("deeppink2", "dodgerblue1")
col = as.character(col)
plot(dens, main = "", xlab = deparse(substitute(mat)))
points(x = mat[CpG,], y = rnorm(ncol(mat), mu, sd), col = alpha(col, alpha), pch = 19)
}
}
### Functionalities from UMtools
# 1) U/M-plots
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00050873", sex = pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(beta_value, "cg00050873", pheno$sex)
### Functionalities from UMtools
# 1) U/M-plots
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00050873", sex = pheno$sex)
# 2) CV jitter plots
# Compute CV per CpG and per sample
CV = compute_cv(M_U_sd$M, M_U_sd$U, M_U$M, M_U_sd$U); gc()
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(beta_value, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
help(GR_to_UM)
help(beads_GR_to_UM)
help(GR_to_UM)
# 3) bivariate Gaussian Mixture Models
set.seed(1); bGMM(M_U$M, M_U$U, "cg13293246", 1) # K = 1
set.seed(2); bGMM(M_U$M, M_U$U, "cg03398919", 2) # K = 2
set.seed(3); bGMM(M_U$M, M_U$U, "cg00814218", 3) # K = 3
set.seed(2); bGMM(M_U$M, M_U$U, "cg27024127", 4) # K = 4
set.seed(6); bGMM(M_U$M, M_U$U, "cg23186955", 5) # K = 5
# 5.1) K-calling with visual output
Kcall_CpG("cg15771735", M_U$M, M_U$U, minPts = 5, reach = seq(0.99, 1.01, 0.01)) # K = 1
# 4) BC(CV)
BC_CV = compute_BC_CV(CV)
density_jitter_plot(CV, which.max(BC_CV), pheno$sex)
which.max(BC_CV)
max(BC_CV)
density_jitter_plot(CV, "cg00050873", pheno$sex)
BC_CV["cg00050873"]
UM_plot
bGMM
### Functionalities from UMtools
# 1) UM plots
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00050873", sex = pheno$sex)
#
UM_plot <- function(M, U, CpG, sex = NULL, xlim = NULL, ylim = NULL, alpha = 0.5)
{
df = data.frame(x = M[CpG,], y = U[CpG,])
if(is.null(xlim))
{
thr = max(c(df$x, df$y))
nDig = floor(log10(thr)) + 1
xlim = c(0, 10^(nDig-2)*ceiling(thr/10^(nDig-2)))
}
if(is.null(ylim))
{
thr = max(c(df$x, df$y))
nDig = floor(log10(thr)) + 1
ylim = c(0, 10^(nDig-2)*ceiling(thr/10^(nDig-2)))
}
if(is.null(sex))
{
plot(df$x, df$y, col = alpha("black", alpha), pch = 19, main = CpG, xlab = 'M', ylab = 'U',
xlim = xlim, ylim = ylim, cex.main = 1)
}
else
{
col = as.factor(sex)
levels(col) = c("deeppink2", "dodgerblue1")
col = as.character(col)
plot(df$x, df$y, col = alpha(col, alpha), pch = 19, main = CpG, xlab = 'M', ylab = 'U',
xlim = xlim, ylim = ylim, cex.main = 1)
}
}
### Functionalities from UMtools
# 1) UM plots
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00050873", sex = pheno$sex)
# 3) bivariate Gaussian Mixture Models
set.seed(1); bGMM(M_U$M, M_U$U, "cg13293246", 1) # K = 1
bGMM
# 3) bivariate Gaussian Mixture Models
set.seed(1); bGMM(M_U$M, M_U$U, "cg13293246", 1) # K = 1
set.seed(2); bGMM(M_U$M, M_U$U, "cg03398919", 2) # K = 2
set.seed(3); bGMM(M_U$M, M_U$U, "cg00814218", 3) # K = 3
set.seed(2); bGMM(M_U$M, M_U$U, "cg27024127", 4) # K = 4
set.seed(6); bGMM(M_U$M, M_U$U, "cg23186955", 5) # K = 5
### Functionalities from UMtools
# 1) UM plots
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00050873", sex = pheno$sex)
#
UM_plot <- function(M, U, CpG, sex = NULL, xlim = NULL, ylim = NULL, alpha = 0.5)
{
df = data.frame(x = M[CpG,], y = U[CpG,])
if(is.null(xlim))
{
thr = max(c(df$x, df$y))
nDig = floor(log10(thr)) + 1
xlim = c(0, 10^(nDig-2)*ceiling(thr/10^(nDig-2)))
}
if(is.null(ylim))
{
thr = max(c(df$x, df$y))
nDig = floor(log10(thr)) + 1
ylim = c(0, 10^(nDig-2)*ceiling(thr/10^(nDig-2)))
}
if(is.null(sex))
{
plot(df$x, df$y, col = alpha("black", alpha), pch = 19, main = CpG, xlab = 'M', ylab = 'U',
xlim = xlim, ylim = ylim)
}
else
{
col = as.factor(sex)
levels(col) = c("deeppink2", "dodgerblue1")
col = as.character(col)
plot(df$x, df$y, col = alpha(col, alpha), pch = 19, main = CpG, xlab = 'M', ylab = 'U',
xlim = xlim, ylim = ylim)
}
}
### Functionalities from UMtools
# 1) UM plots
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00050873", sex = pheno$sex)
# 3) bivariate Gaussian Mixture Models
set.seed(1); bGMM(M_U$M, M_U$U, "cg13293246", 1) # K = 1
### Functionalities from UMtools
# 1) UM plots
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00050873", sex = pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(beta_value, "cg00050873", pheno$sex)
#
density_jitter_plot <- function(mat, CpG, sex = NULL, alpha = 0.5, lambda = 0.05)
{
dens = density(mat[CpG,])
mu = median(dens$y)
sd = diff(quantile(dens$y, c(0.5-lambda, 0.5 + lambda)))
if(is.null(sex))
{
plot(dens, main = CpG, xlab = deparse(substitute(mat)))
points(x = mat[CpG,], y = rnorm(ncol(mat), mu, sd), pch = 19)
}
else if(!is.null(sex))
{
col = as.factor(sex)
levels(col) = c("deeppink2", "dodgerblue1")
col = as.character(col)
plot(dens, main = CpG, xlab = deparse(substitute(mat)))
points(x = mat[CpG,], y = rnorm(ncol(mat), mu, sd), col = alpha(col, alpha), pch = 19)
}
}
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(beta_value, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(beta_value, "cg00050873", pheno$sex)
help(assay)
# X-inactivation
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00026186", sex = pheno$sex)
However, some loci escape X-inactivation and as a result, are unmethylated in both males and females. However, given the double-copy of X-chromosomes in females, the unmethylated intensity is higher on average than in males
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg04927982", sex = pheno$sex)
```
However, some loci escape X-inactivation and as a result, are unmethylated in both males and females. However, given the double-copy of X-chromosomes in females, the unmethylated intensity is higher on average than in males
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg04927982", sex = pheno$sex)
annotation["cg04927982",]
```
# Extract control probes information
annotation <- getAnnotation(rgSet)
However, some loci escape X-inactivation and as a result, are unmethylated in both males and females. However, given the double-copy of X-chromosomes in females, the unmethylated intensity is higher on average than in males
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg04927982", sex = pheno$sex)
annotation["cg04927982",]
```
However, some loci escape X-inactivation and as a result, are unmethylated in both males and females. However, given the double-copy of X-chromosomes in females, the unmethylated intensity is higher on average than in males
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg04927982", sex = pheno$sex)
annotation["cg04927982", c("chr", "pos")]
```
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00026186", sex = pheno$sex)
annotation["cg00026186", c("chr", "pos")] # chrX  53254653
```
Unlike on the methylation scale, failed samples cluster at the origin of the UM-plane:
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00050873", sex = pheno$sex)
annotation["cg00050873", c("chr", "pos")] # chrX  48367230
```
![Alt text](img/UM.png?raw=true "cg00050873 U/M plot")
However, some loci escape X-inactivation and as a result, are unmethylated in both males and females. However, given the double-copy of X-chromosomes in females, the unmethylated intensity is higher on average than in males
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg04927982", sex = pheno$sex)
annotation["cg04927982", c("chr", "pos")] # chrX  53254653
```
Some probes are cross-reactive, e.g. they hybridize at several loci in the genome. Although supposedly targetting an autosomal locus, this probe looks exactly like X-inactivation due to its cross-reactivity towards the chromosome X:
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg20922653", sex = pheno$sex)
annotation["cg04927982", c("chr", "pos")] # chrX  53254653
```
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg20922653", sex = pheno$sex)
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg2092653", sex = pheno$sex)
annotation["cg04927982", c("chr", "pos")] # chrX  53254653
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg2092653", sex = pheno$sex)
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg20926353", sex = pheno$sex)
Some probes are cross-reactive, e.g. they hybridize at several loci in the genome. Although supposedly targetting an autosomal locus, this probe looks exactly like X-inactivation due to its cross-reactivity towards the chromosome X:
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg20926353", sex = pheno$sex)
abline(0,1)
annotation["cg04927982", c("chr", "pos")] # chrX  53254653
```
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg20926353", sex = pheno$sex)
annotation["cg04927982", c("chr", "pos")] # chrX  53254653
Some probes are cross-reactive, e.g. they hybridize at several loci in the genome. Although supposedly targetting an autosomal locus, this probe looks exactly like X-inactivation due to its cross-reactivity towards the chromosome X:
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg20926353", sex = pheno$sex)
annotation["cg20926353", c("chr", "pos")] # chrX  53254653
```
In this case, the probe is cross-reactive to the Y-chromosome:
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg26738106", sex = pheno$sex)
annotation["cg20926353", c("chr", "pos")] # chr9  84303358
```
In this case, the probe is cross-reactive to the Y-chromosome (males get an extra M-signal from the Y-chromosome):
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg26738106", sex = pheno$sex)
annotation["cg26738106", c("chr", "pos")] # chr9  84303358
```
In this case, the probe is cross-reactive to the Y-chromosome (males get an extra M-signal from the Y-chromosome):
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg26738106", sex = pheno$sex)
annotation["cg26738106", c("chr", "pos")] # chr9  84303358
```
In this case, the probe escapes X-inactivation but on top, it is cross-reactive to the Y-chromosome (males get an extra M-signal from the Y-chromosome):
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg26738106", sex = pheno$sex)
annotation["cg26738106", c("chr", "pos")] # chrX   3265038
```
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg23186955", sex = pheno$sex)
annotation["cg23186955", c("chr", "pos")] # chrX   3265038
Genetic artefacts such as SNPs or indels can cause probe failure when homozygous:
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg03398919", sex = pheno$sex)
annotation["cg26738106", c("chr", "pos")] # chrX   3265038
```
Genetic artefacts such as SNPs or indels can cause probe failure when homozygous:
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg03398919", sex = NULL)
annotation["cg26738106", c("chr", "pos")] # chrX   3265038
```
annotation["cg03398919", c("chr", "pos")] # chrX   3265038
But other times, the SNP is confused for the U epiallele:
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00814218", sex = NULL)
annotation["cg03398919", c("chr", "pos")] # chr2 173118470
```
Or the M epiallele:
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg03398919", sex = NULL)
annotation["cg03398919", c("chr", "pos")] # chr2 173118470
```
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00814218", sex = NULL)
annotation["cg00814218", c("chr", "pos")] # chr2 173118470
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00814218", sex = NULL)
annotation["cg00814218", c("chr", "pos")] # chr14  37445440
But other times, the SNP is confused for the U/M epiallele. When the biological context has the opposite state (SNP = U in a methylated region or viceversa), it gives rise to 3 clusters. Here, SNP = U:
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00814218", sex = NULL)
annotation["cg00814218", c("chr", "pos")] # chr14  37445440
```
Here, SNP = M:
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg17004290", sex = NULL)
annotation["cg03398919", c("chr", "pos")] # chr2 173118470
```
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg17004290", sex = NULL)
annotation["cg17004290", c("chr", "pos")] # chr2 173118470
In this case, the targetted locus escapes X-inactivation but on top, the probe is cross-reactive to the Y-chromosome (males get an extra M-signal from the Y-chromosome):
```r
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg26738106", sex = pheno$sex)
annotation["cg26738106", c("chr", "pos")] # chrX   3265038
```
![Alt text](img/CR_2.png?raw=true "cg26738106 U/M plot")
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00814218", sex = NULL)
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00814218", sex = NULL)
annotation["cg00814218", c("chr", "pos")] # chr14  37445440
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg17004290", sex = NULL)
annotation["cg17004290", c("chr", "pos")] # chr2 173118470
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg17004290", sex = NULL)
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg27024127", sex = NULL)
annotation["cg27024127", c("chr", "pos")] # chr4 108853384
```r
CV = compute_cv(M_U_sd$M, M_U_sd$U, M_U$M, M_U_sd$U)
density_jitter_plot(CV, "cg00026186", pheno$sex)
BC_CV = compute_BC_CV(CV)
BC_CV["cg00026186"]
# cg00050873
#   1.128741
```
![Alt text](img/jitter_CV.png?raw=true "cg00026186 jitter")
annotation["cg00026186",]
```r
CV = compute_cv(M_U_sd$M, M_U_sd$U, M_U$M, M_U_sd$U)
density_jitter_plot(CV, "cg00026186", pheno$sex)
BC_CV = compute_BC_CV(CV)
BC_CV["cg00026186"]
# cg00026186
#   1.188498
annotation["cg00026186", c("chr", "pos")]
```
![Alt text](img/jitter_CV.png?raw=true "cg00026186 jitter")
density_jitter_plot(CV, "cg00026186", pheno$sex)
annotation["cg00026186", c("chr", "pos")]
density_jitter_plot(CV, "cg00026186", pheno$sex)
density_jitter_plot(CV, "cg00026186", pheno$sex)
density_jitter_plot(CV, "cg00026186", pheno$sex)
density_jitter_plot(CV, "cg00026186", pheno$sex)
density_jitter_plot(CV, "cg00026186", pheno$sex)
annotation["cg00026186", c("chr", "pos")]
