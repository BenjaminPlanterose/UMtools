plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
sum(is.na(X))
sum(X > 1)
sum(X >= 1)
sum(X <= 0)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
K = res$sampleresults[,1]
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
n = 100
x1 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
x2 = c(rbeta(n, 10, 2), rbeta(n, 2, 10))
X = rbind(x1, x2)
dim(X) # 2 2000
sum(is.na(X))
sum(X >= 1)
sum(X <= 0)
plot(density(x1))
plot(density(x2))
res = gaphunter(object = X, verbose = T)
0.4/5
sqrt(0.4/5()
sqrt(0.4/5)
sqrt(0.4/5)
sqrt(0.25/5)
process.beta.fread <- function(beta)
{
cpgs <- as.vector(beta$rn)
beta <- beta[,-(1:2)]
beta <- as.matrix(beta)
rownames(beta) <- cpgs
return(beta)
}
library(data.table)
library(data.table)
library(minfi)
library(scales)
library(GEOquery)
library(illuminaio)
library(parallel)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
list.files()
Red = list.files(path = "./", pattern = "*Red.idat")[1:5]
Green = list.files(path = "./", pattern = "*Grn.idat")[1:5]
Manifest = data(Manifest)
mc_readIDAT = function(wd, Manifest, nCores = NULL, return.GR_UM = "UM")
{
setwd(wd)
# Red_idats = list.files(path = "./", pattern = "*Red.idat")
# Grn_idats = list.files(path = "./", pattern = "*Grn.idat")
Red_idats = list.files(path = "./", pattern = "*Red.idat")[1:5]
Grn_idats = list.files(path = "./", pattern = "*Grn.idat")[1:5]
SampleNames = sapply(strsplit(Red_idats, "_Red.idat"), function(x) x[1])
if(length(Red_idats) != length(Grn_idats)) stop("Some idats are missing the Grn or the Red channel")
if(is.null(nCores)) (np <- detectCores(logical = FALSE) - 1)
cl <- makeCluster(np)
clusterExport(cl, c("readIDAT", "Red_idats", "Grn_idats"), envir=environment())
Red_list <- parLapply(cl = cl, X = 1:length(Red_idats), function(x) readIDAT(Red_idats[x])$Quants); gc()
Grn_list <- parLapply(cl = cl, X = 1:length(Grn_idats), function(x) readIDAT(Grn_idats[x])$Quants); gc()
stopCluster(cl)
Red = Reduce(cbind, lapply(Red_list, function(x) x[,"Mean"]))
Grn = Reduce(cbind, lapply(Red_list, function(x) x[,"Mean"]))
Red_SD = Reduce(cbind, lapply(Red_list, function(x) x[,"SD"]))
Grn_SD = Reduce(cbind, lapply(Red_list, function(x) x[,"SD"]))
colnames(Red) = colnames(Grn) = colnames(Red_SD) = colnames(Grn_SD) = SampleNames
if(return.GR_UM == "GR")
{
return(list(Red = Red, Red_SD = Red_SD, Grn = Grn, Grn_SD = Grn_SD))
}
else if(return.GR_UM == "UM")
{
A = GR_to_UM(Grn, Red, Manifest, SampleNames, SD = FALSE); rm(Grn, Red); gc()
B = GR_to_UM(Grn_SD, Red_SD, Manifest, SampleNames, SD = TRUE); rm(Grn_SD, Red_SD); gc()
return(c(A,B))
}
}
GR_to_UM <- function(Grn, Red, Manifest, SampleNames, SD)
{
typeI_red = Manifest[Manifest[, "Color"] == "Red",]
typeI_grn = Manifest[Manifest[, "Color"] == "Grn",]
typeII = Manifest[Manifest$Type == "II",]
I_R_U = typeI_red[,"AddressA"]
I_R_M = typeI_red[,"AddressB"]
I_G_U = typeI_grn[,"AddressA"]
I_G_M = typeI_grn[,"AddressB"]
II_UM = typeII[,"AddressA"]
M = matrix(NA, nrow = nrow(Manifest), ncol = length(Red_idats))
U = matrix(NA, nrow = nrow(Manifest), ncol = length(Red_idats))
M_sd = matrix(NA, nrow = nrow(Manifest), ncol = length(Red_idats))
U_sd = matrix(NA, nrow = nrow(Manifest), ncol = length(Red_idats))
rownames(M) = rownames(U) = rownames(M_sd) = rownames(U_sd) = rownames(Manifest)
colnames(M) = colnames(U) = colnames(M_sd) = colnames(U_sd) = SampleNames
# Type I-Red: AddressA(Red) = U, AdressB(Red) = M
U[rownames(typeI_red),] = Red[I_R_U,]
M[rownames(typeI_red),] = Red[I_R_M,]
# Type I-Grn: AddressA(Grn) = U, AdressB(Grn) = M
U[rownames(typeI_grn),] = Grn[I_G_U,]
M[rownames(typeI_grn),] = Grn[I_G_M,]
# Type II: AddressA(Red) = U, AdressA(Grn) = M
U[rownames(typeII),] = Red[II_UM,]
M[rownames(typeII),] = Grn[II_UM,]
if(SD)
{
return(list(sd_U = U, sd_M = M))
}
else
{
return(list(U = U, M = M))
}
}
library(illuminaio)
library(parallel)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
Manifest = data(Manifest)
Manifest
data(IlluminaHumanMethylation450kanno.ilmn12.hg19)
head(IlluminaHumanMethylation450kanno.ilmn12.hg19)
IlluminaHumanMethylation450kanno.ilmn12.hg19
Manifest = data(Manifest)
Manifest
data("Locations")
Locations
data("Manifest")
GR_to_UM
library(IlluminaHumanMethylation450kmanifest)
data(Manifest)
data(IlluminaHumanMethylation450kmanifest)
annotation = IlluminaHumanMethylation450kmanifest
head(annotation)
annotation = as.data.frame(IlluminaHumanMethylation450kmanifest)
annotation
annotation@data
annotation@annotation
annotation[[1]]
getAnnotation(annotation)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
data("IlluminaHumanMethylation450kanno.ilmn12.hg19")
head(IlluminaHumanMethylation450kanno.ilmn12.hg19)
IlluminaHumanMethylation450kanno.ilmn12.hg19
data(Manifest)
Manifest
head(Manifest)
library(data.table)
extract.maf <- function(metadata)
{
partB = unlist(lapply(strsplit(metadata, split= "CAF="), function(x) x[2]))
CAF = unlist(lapply(strsplit(partB, split= ";"), function(x) x[1]))
MAF = unlist(lapply(strsplit(CAF, split = ","), function(x) min(suppressWarnings(sort(as.numeric(x), decreasing = T)[1:2]))))
return(MAF)
}
extract.caf <- function(metadata)
{
partB = unlist(lapply(strsplit(metadata, split= "CAF="), function(x) x[2]))
CAF = unlist(lapply(strsplit(partB, split= ";"), function(x) x[1]))
return(CAF)
}
prep_alternate_allele <- function(CpG_SNP, Thr)
{
# Extract metadata from sites with multiple minor alleles
minor = CpG_SNP$m
l_m = sapply(strsplit(minor, split = ","), length)
where = which(l_m >= 2)
metadata = as.vector(CpG_SNP$metadata)[where]
CAF = extract.caf(metadata)
# Eliminate alleles if below a threshold
eliminate = lapply(strsplit(CAF, split =  ","), function(x) which(x == "." | as.numeric(x) < Thr)-1)
length0 = which(sapply(eliminate, length) == 0)
splitted = strsplit(minor[where], split =  ",")
minor_cor = minor
minor_cor[where] = unlist(lapply(1:length(splitted), function(x) paste((splitted[[x]])[-eliminate[[x]]], collapse = ",")))
minor_cor[where][length0] = minor[where][length0]
CpG_SNP$m = minor_cor
return(CpG_SNP)
}
library(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
data(Manifest); head(Manifest)
data(Locations); head(Locations)
annotation <- cbind(Locations, Manifest); rm(Manifest, Locations); gc()
sum(!(rownames(annotation) == annotation$Name)) # 0
dim(annotation) # 865859     11
setwd("/home/ben/Documents/Git/UMtools_dat/dat_EPIC/vcf/proc/")
# CpG-SNP
CpG_SNP = fread("CpG_SNP.vcf")
CpG_SNP = as.data.frame(CpG_SNP)
colnames(CpG_SNP) = c("chr", "start", "rs", "M", "m", "v6", "v7", "metadata", "chr2", "start2", "end2", "cg")
CpG_SNP$type = annotation[CpG_SNP$cg,"Type"]
CpG_SNP$strand = annotation[CpG_SNP$cg,"strand"]
CpG_SNP$real_pos = annotation[CpG_SNP$cg, "pos"]
metadata = as.vector(CpG_SNP$metadata); MAF = extract.maf(metadata)
CpG_SNP = CpG_SNP[MAF > 0.05,] # Filter > 5 % variants
# SBE-SNP
SBE_SNP = fread("SBE_SNP.vcf")
SBE_SNP = as.data.frame(SBE_SNP)
colnames(SBE_SNP) = c("chr", "start", "rs", "M", "m", "v6", "v7", "metadata", "chr2", "start2", "end2", "cg")
SBE_SNP$strand = annotation[SBE_SNP$cg,"strand"]
SBE_SNP$real_pos = annotation[SBE_SNP$cg, "pos"]
SBE_SNP$type = annotation[SBE_SNP$cg,"Type"]
metadata = as.vector(SBE_SNP$metadata); MAF = extract.maf(metadata)
SBE_SNP = SBE_SNP[MAF > 0.05,] # Filter > 5 % variants
CpG_SNP <- prep_alternate_allele(CpG_SNP, 0.05) # Eliminates alternate alleles < Thr
where = sapply(strsplit(CpG_SNP$m, split = ","), length) > 1
CpG_SNP_Tri = CpG_SNP[where, ]
CpG_SNP_Bi = CpG_SNP[!where, ]
rownames(CpG_SNP_Bi) = rownames(CpG_SNP_Tri) = NULL
table(CpG_SNP_Tri$M, CpG_SNP_Tri$m) # 450K
table(CpG_SNP_Bi$M, CpG_SNP_Bi$m) # 450K
setwd("/home/ben/Documents/Git/UMtools/data/")
save(CpG_SNP_Tri, file = "triallelic_CpG_SNP_EPIC.RData")
SBE_SNP <- prep_alternate_allele(SBE_SNP, 0.05) # Eliminates alternate alleles < Thr
where = sapply(strsplit(SBE_SNP$m, split = ","), length) > 1; sum(where) # 0
table(SBE_SNP$M, SBE_SNP$m)
names = c("II_plus_SNP1_C_TA", "II_plus_SNP1_C_G", "II_plus_SNP2_G_ACT",
"II_minus_SNP1_C_AGT", "II_minus_SNP2_G_TA", "II_minus_SNP2_G_C",
"I_plus_SNP0_A_C_T", "I_plus_SNP0_ACT_G", "I_plus_SNP1_C_T", "I_plus_SNP1_C_AG", "I_plus_SNP2_G_ACT",
"I_minus_SNP1_C_AGT", "I_minus_SNP2_G_A", "I_minus_SNP2_G_CT", "I_minus_SNP3_A_G_T", "I_minus_SNP3_AGT_C")
classification = as.list(rep(NA, length(names)))
names(classification) = names
classification[["II_plus_SNP1_C_TA"]] = CpG_SNP_Bi[CpG_SNP_Bi$type == "II" &
CpG_SNP_Bi$strand == "+" &
CpG_SNP_Bi$M == "C" &
CpG_SNP_Bi$m %in% c("T", "A"),]
classification[["II_plus_SNP1_C_G"]] = CpG_SNP_Bi[CpG_SNP_Bi$type == "II" &
CpG_SNP_Bi$strand == "+" &
CpG_SNP_Bi$M == "C" &
CpG_SNP_Bi$m %in% c("G"),]
classification[["II_plus_SNP2_G_ACT"]] = CpG_SNP_Bi[CpG_SNP_Bi$type == "II" &
CpG_SNP_Bi$strand == "+" &
CpG_SNP_Bi$M == "G" &
CpG_SNP_Bi$m %in% c("A", "C", "T"),]
classification[["II_minus_SNP1_C_AGT"]] = CpG_SNP_Bi[CpG_SNP_Bi$type == "II" &
CpG_SNP_Bi$strand == "-" &
CpG_SNP_Bi$M == "C" &
CpG_SNP_Bi$m %in% c("A", "G", "T"),]
classification[["II_minus_SNP2_G_TA"]] = CpG_SNP_Bi[CpG_SNP_Bi$type == "II" &
CpG_SNP_Bi$strand == "-" &
CpG_SNP_Bi$M == "G" &
CpG_SNP_Bi$m %in% c("A", "T"),]
classification[["II_minus_SNP2_G_C"]] = CpG_SNP_Bi[CpG_SNP_Bi$type == "II" &
CpG_SNP_Bi$strand == "-" &
CpG_SNP_Bi$M == "G" &
CpG_SNP_Bi$m %in% c("C"),]
classification[["I_plus_SNP1_C_T"]] = CpG_SNP_Bi[CpG_SNP_Bi$type == "I" &
CpG_SNP_Bi$strand == "+" &
CpG_SNP_Bi$M == "C" &
CpG_SNP_Bi$m %in% c("T"),]
classification[["I_plus_SNP1_C_AG"]] = CpG_SNP_Bi[CpG_SNP_Bi$type == "I" &
CpG_SNP_Bi$strand == "+" &
CpG_SNP_Bi$M == "C" &
CpG_SNP_Bi$m %in% c("A", "G"),]
classification[["I_plus_SNP2_G_ACT"]] = CpG_SNP_Bi[CpG_SNP_Bi$type == "I" &
CpG_SNP_Bi$strand == "+" &
CpG_SNP_Bi$M == "G" &
CpG_SNP_Bi$m %in% c("A", "C", "T"),]
classification[["I_minus_SNP1_C_AGT"]] = CpG_SNP_Bi[CpG_SNP_Bi$type == "I" &
CpG_SNP_Bi$strand == "-" &
CpG_SNP_Bi$M == "C" &
CpG_SNP_Bi$m %in% c("A", "G", "T"),]
classification[["I_minus_SNP2_G_A"]] = CpG_SNP_Bi[CpG_SNP_Bi$type == "I" &
CpG_SNP_Bi$strand == "-" &
CpG_SNP_Bi$M == "G" &
CpG_SNP_Bi$m %in% c("A"),]
classification[["I_minus_SNP2_G_CT"]] = CpG_SNP_Bi[CpG_SNP_Bi$type == "I" &
CpG_SNP_Bi$strand == "-" &
CpG_SNP_Bi$M == "G" &
CpG_SNP_Bi$m %in% c("C", "T"),]
classification[["I_plus_SNP0_A_C_T"]] = SBE_SNP[SBE_SNP$type == "I" &
SBE_SNP$strand == "+" &
SBE_SNP$M %in% c("C", "T", "A") & SBE_SNP$m %in% c("C", "T", "A"),]
classification[["I_plus_SNP0_ACT_G"]] = SBE_SNP[SBE_SNP$type == "I" &
SBE_SNP$strand == "+" &
(SBE_SNP$M %in% c("C", "T", "A", "G") & SBE_SNP$m %in% c("G") |
SBE_SNP$M %in% c("G") & SBE_SNP$m %in% c("C", "T", "A", "G")),]
classification[["I_minus_SNP3_A_G_T"]] = SBE_SNP[SBE_SNP$type == "I" &
SBE_SNP$strand == "-" &
SBE_SNP$M %in% c("G", "T", "A") & SBE_SNP$m %in% c("G", "T", "A"),]
classification[["I_minus_SNP3_AGT_C"]] = SBE_SNP[SBE_SNP$type == "I" &
SBE_SNP$strand == "-" &
(SBE_SNP$M %in% c("G", "T", "A") & SBE_SNP$m %in% c("C") |
SBE_SNP$M %in% c("C") & SBE_SNP$m %in% c("G", "T", "A")),]
sapply(classification, nrow) # 450K
sum(sapply(classification, nrow)) # 7722; 450K
nrow(SBE_SNP) + nrow(CpG_SNP_Bi) # 7722; 450K
setwd("/home/ben/Documents/Git/UMtools/data/")
save(classification, file = "classification_CpG_SNP_EPIC.RData")
