grepl("a", Split)
Split
grepl("text", Split)
grepl("here", Split)
help(grepl)
x$col1
Split
sapply(Split, function(x) x %in% levels[i])
sapply(Split, function(x) x %in% levels[i])
levels
x
x = data.frame(id = c(1,2), col1 = c("text---here","text---there"))
x$col1 = as.vector(x$col1)
Split = strsplit(as.vector(x$col1), split = "---")
levels = unique(unlist(Split))
x = cbind(x, matrix(ncol = length(levels), nrow = nrow(x)))
x
| c(0,1)
|| c(0,1)
outer(c(0,1))
Split
x[,ncol(x)-length(levels)+i] <- as.numeric(grepl(levels[i], x$col1, fixed = TRUE, pattern = "---"))
as.numeric(grepl(levels[i], x$col1, fixed = TRUE, pattern = "---"))
grepl("ab---bab", "ab")
grepl( "ab", "ab---bab",)
grepl("ab", "ab---bab")
grepl("ab", "ab---bab", pattern = "^---^")
grepl("ab", "ab---bab", pattern = "*---*")
grepl("ab", "ab---bab", pattern = ".---.")
grepl("ab", "ab---bab", pattern = "?---?")
grepl("ab", "ab---bab", pattern = "?[---]?")
grepl("bab", "ab---bab", pattern = "?[---]?")
grepl("b", "ab---bab", pattern = "?[---]?")
grepl("ab", "ab---bab", pattern = "?[---]?")
grepl("bab", "ab---bab", pattern = "?[---]?")
grepl("b", "ab---bab", pattern = "?[---]?")
grepl
help(grepl)
grepl("b", "ab---bab", pattern = "^^")
grepl("b", "ab---bab", pattern = "^[---]^")
grepl("ab", "ab---bab", pattern = "^[---]^")
grepl("bab", "ab---bab", pattern = "^[---]^")
grepl("b", "ab---bab", pattern = "^[---]^")
grepl("^ab[---]^", "ab---bab", pattern = "^[---]^")
ab
"ab"
grepl(pattern = "^ab", x = "ab---bab")
grepl(pattern = c("^ab", "ab^"), x = "ab---bab")
grepl(pattern = c("^ab^"), x = "ab---bab")
grepl(pattern = c("^[---]ab[---]^"), x = "ab---bab")
grepl(pattern = c("^---ab---^"), x = "ab---bab")
grepl(pattern = c("^---ab---^"), x = "ab---bab")
grepl(pattern = c("?{---}ab?{---}"), x = "ab---bab")
grepl(pattern = c("?{---}bab?{---}"), x = "ab---bab")
grepl(pattern = c("?{---}b?{---}"), x = "ab---bab")
grepl(pattern = "?", x = "ab---bab")
grepl(pattern = "a?", x = "ab---bab")
grepl(pattern = "b?", x = "ab---bab")
grepl(pattern = "b{...}?", x = "ab---bab")
grepl(pattern = "b?{b}", x = "ab---bab")
grepl(pattern = "b?{...}", x = "ab---bab")
grepl(pattern = "b?{---}", x = "ab---bab")
grepl(pattern = "b---", x = "ab---bab")
grepl(pattern = "ab---", x = "ab---bab")
grepl(pattern = "---bab", x = "ab---bab")
grepl(pattern = "---bab---", x = "ab---bab")
grepl(pattern = "---bab[---]", x = "ab---bab")
grepl(pattern = "---bab?[---]", x = "ab---bab")
grepl(pattern = "---bab?{---}", x = "ab---bab")
grepl(pattern = "?{---}bab?{---}", x = "ab---bab")
grepl(pattern = "?{---}ab?{---}", x = "ab---bab")
grepl(pattern = "?{---}ab?{---}", x = "a---bab")
Split
Split[[1]]
grepl(pattern = levels[1], x = Split[[1]])
Split[[1]]
levels[1]
grepl(pattern = paste("^", levels[1], "^"), x = Split[[1]])
Split[[1]]
levels[1]
grepl("^text", "text")
grepl("text^", "text")
grepl("text^", "text.")
grepl("text^", "txet")
grepl("a^", "texta")
grepl("text$", "text")
grepl("^text$", "text")
grepl(pattern = paste("^", levels[1], "$"), x = Split[[1]])
Split[[1]]
paste("^", levels[1], "$")
grepl(pattern = paste("^", levels[1], "$", sep = ""), x = Split[[1]])
grepl(pattern = paste("^", levels[1], "$", sep = ""), x = Split[[1]])
levels[2]
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split[[2]])
Split[[2]]
x$col1
Split[[1]]
Split
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split)
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split[[2]])
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split[[1]])
||
grepl("^text$", "text")
||
|
sapply(grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split[[1]]), function(x) x | x)
grepl(pattern = paste("^", levels[2], "$", sep = "")
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split[[1]])
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split[[1]])
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split[[1]])
Split
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = Split)
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = as.vector(Split))
as.vector(Split)
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = unlist(Split))
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = unlist(Split))
Split
x$col1
grepl(pattern = paste("^", levels[2], "$", sep = ""), x = x$col1)
x$col1
levels[2]
grepl(pattern = "^here$", x = x$col1)
x$col1
grepl(pattern = "^here$", x = x$col1)
grepl(pattern = "^?{...}here?{...}$", x = x$col1)
grepl(pattern = "^?{---}here?{---}$", x = x$col1)
grepl(pattern = "^*{---}here*{---}$", x = x$col1)
grepl(pattern = "^*here*{---}$", x = x$col1)
grepl(pattern = "^*here*$", x = x$col1)
grepl(pattern = "^*here$", x = x$col1)
grepl(pattern = "*here$", x = x$col1)
grepl(pattern = "^here*", x = x$col1)
x$col1
grepl(pattern = "*here?", x = x$col1)
grepl(pattern = "*---here?", x = x$col1)
grepl(pattern = "*---there?", x = x$col1)
Split
levels[i]
sapply(Split, function(x) x == levels[i])
sapply(Split, function(x) max(x == levels[i]))
x = data.frame(id = c(1,2), col1 = c("text---here","text---there")); x$col1 = as.vector(x$col1)
Split = strsplit(as.vector(x$col1), split = "---")
levels = unique(unlist(Split))
x = cbind(x, matrix(ncol = length(levels), nrow = nrow(x)))
for(i in 1:length(levels))
{
x[,ncol(x)-length(levels)+i] <- sapply(Split, function(x) max(x == levels[i]))
}
colnames(x) <- c("id", "col1", levels)
x
x
a = c("Tue Mar 31 13:42:58 +0000 2020", "Sat Mar 14 05:15:56 +0000 2020")
a
as.Date(a[1])
help("as.Date")
as.Date(a[1], format = "%d %m %y")
format(Sys.Date(), "%a %b %d")
as.Date(a[1], format = "%a %d %m %y")
as.Date(a[1], format = "%a %m %d %t %y")
as.Date(a[1], format = "%a %m %d %t %z %y")
Sys.Date()
format(Sys.Date(), "%a %b %d")
as.Date(Sys.Date(), "%a %b %d")
as.Date(Sys.Date(), "%d %a %d")
as.Date(a[1], format = '%a %b %d %H:%M:%S %z %Y')
as.Date(a[1], format = '%a %b %d %H:%M:%S %z %Y')
a[1]
as.Date(a[1], format = '%a %b %d %H:%M:%S %z %Y')
df <- data.frame(created_at=c(
"Tue Mar 31 13:42:58 +0000 2020 Sat Mar 14 05:15:56 +0000 2020",
"Sun Apr 05 14:02:10 +0000 2020 Tue Mar 24 09:06:12 +0000 2020",
"Tue Apr 28 01:14:28 +0000 2020 Thu Oct 24 18:47:10 +0000 2019"))
df$dates = as.Date(df$created_at, format = '%a %b %d %H:%M:%S %z %Y')
df$dates
sin
pryr::show_c_source(.Internal(match.call(definition, call, expand.dots)))
sin
install.package("pryr")
install.packages("pryr")
sin
pryr::show_c_source(.Primitive("sin"))
show_c_source(.Internal(mean(x)))
library(pryr)
show_c_source(.Internal(mean(x)))
mean(x)
mean
.Internal(mean(x))
pryr::show_c_source(.Primitive("sin"))
sin
mean
pryr::show_c_source(.Primitive(sin(x)))
show_c_source(.Internal(mean(x)))
pryr::show_c_source(.Primitive(sin(x)))
pryr::show_c_source(MATH1(sin))
sin
pryr::show_c_source(.Primitive(sin(x)))
sin(0)
matrix(c(1,1,1,0,0,0,1,1,1,0,0,0), nrow = 3, ncol = 2)
matrix(c(2,1,1,0,0,0,1,1,1,0,0,0), nrow = 3, ncol = 2)
matrix(c(2,1,1,0,0,0,1,1,1,0,0,1), nrow = 3, ncol = 2)
matrix(c(2,1,1,0,0,0,1,1,1,0,0,1), nrow = 3, ncol = 2)
matrix(c(2,1,1,0,0,1), nrow = 3, ncol = 2)
A = matrix(c(2,1,1,0,0,1), nrow = 3, ncol = 2)
image(A)
mtcars$hp2 = mtcars$hp^2
mod1 <- lm(log(mpg) ~ cyl + wt + vs*hp + vs*hp2, data = mtcars)
summary(mod1) # With this you can check that the model you specified is what you want
(marg1 <- margins(mod1)) # The error disappeared.
summary(marg1)
library(margins)
mtcars$hp2 = mtcars$hp^2
mod1 <- lm(log(mpg) ~ cyl + wt + vs*hp + vs*hp2, data = mtcars)
summary(mod1) # With this you can check that the model you specified is what you want
(marg1 <- margins(mod1)) # The error disappeared.
library(margins)
install.packages("margin")
library(minfi)
library(ggplot2)
library(reshape2)
###################################  450K  ###########################################
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
annotation <- getAnnotation(IlluminaHumanMethylation450kanno.ilmn12.hg19)
annot = as.data.frame(annotation[,1:3])
annot = annot[order(annot$chr, annot$pos),]
chr = unique(annot$chr)
annot_list = lapply(chr, function(x) annot[annot$chr %in% x,])
names(annot_list) = chr
for(i in 1:length(annot_list))
{
annot_list[[i]]$delta = c(NA, diff(annot_list[[i]]$pos))
}
annot = Reduce(rbind, annot_list)
annot$delta_log10 = log10(annot$delta)
ggplot(annot, aes(x=chr, y=delta_log10, fill = chr)) +
geom_boxplot() + geom_abline(intercept = log10(500), slope = 0, lty = 2, col = "black", alpha = 0.5) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
plot(density(na.omit(annot$delta_log10)))
abline(v = log10(500))
# Simulation
set = na.omit(annot$delta_log10)
res = replicate(1000000,
{
i = sample(1:length(set), 1)
sum(set[i:(i+1)] < log10(500))
})
table(res)
#      0      1      2
# 290972 261244 447781
# P(X >= 1)
1 - table(res)[["0"]]/length(res) # 0.709028
set.seed(1)
res = replicate(1000000,
{
i = sample(1:length(set), 1)
sum(set[i:(i+1)] < log10(500))
})
table(res)
set.seed(1)
res = replicate(1000000,
{
i = sample(1:length(set), 1)
sum(set[i:(i+1)] < log10(500))
})
table(res)
#      0      1      2
# 290972 261244 447781
# P(X >= 1)
1 - table(res)[["0"]]/length(res) # 0.709028
table(res)[["2"]]/length(res) # 0.708404
set = na.omit(annot$delta_log10)
set.seed(1)
res = replicate(1000000,
{
i = sample(1:length(set), 1)
sum(set[i:(i+1)] <= log10(500))
})
table(res)
#      0      1      2
# 290972 261244 447781
# P(X >= 1)
1 - table(res)[["0"]]/length(res) # 0.708404
table(res)[["2"]]/(table(res)[["2"]] + table(res)[["3"]]) # 0.708404
table(res)[["2"]]
(table(res)[["2"]]
table(res)[["2"]]
table(res)[["2"]]
table(res)[["3"]]
table(res)[["2"]]/(table(res)[["2"]] + table(res)[["1"]]) # 0.708404
table(res)[["2"]]
table(res)[["2"]]
ggplot(annot, aes(x=chr, y=delta_log10, fill = chr)) +
geom_boxplot() + geom_abline(intercept = log10(500), slope = 0, lty = 2, col = "black", alpha = 0.5) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(minfi)
library(ggplot2)
library(reshape2)
library(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
data(Locations)
dim(Locations) # 865859      3
annot = as.data.frame(Locations)
annot = annot[order(annot$chr, annot$pos),]
chr = unique(annot$chr)
annot_list = lapply(chr, function(x) annot[annot$chr %in% x,])
names(annot_list) = chr
for(i in 1:length(annot_list))
{
annot_list[[i]]$delta = c(NA, diff(annot_list[[i]]$pos))
}
annot = Reduce(rbind, annot_list)
annot$delta_log10 = log10(annot$delta)
ggplot(annot, aes(x=chr, y=delta_log10, fill = chr)) +
geom_boxplot() + geom_abline(intercept = log10(500), slope = 0, lty = 2, col = "black", alpha = 0.5) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Simulation
set = na.omit(annot$delta_log10)
# Simulation
length(set)
set.seed(2)
res = replicate(1000000,
{
i = sample(1:length(set), 1)
sum(set[i:(i+1)] <= log10(500))
})
table(res)
# P(X >= 1)
1 - table(res)[["0"]]/length(res) # 0.641513
table(res)[["2"]]/(table(res)[["2"]] + table(res)[["1"]]) # 0.6311917
CpGs = c("cg26371957", "cg14911689", "cg26654770", "cg01201512")
library(FlowSorted.Blood.450k) # Reinius
library(FlowSorted.CordBlood.450k) # Babulski
library(FlowSorted.CordBloodNorway.450k) # Gerwin
library(gplots)
library(RColorBrewer)
library(minfi)
pheno1 <- colData(FlowSorted.Blood.450k)
pheno2 <- colData(FlowSorted.CordBlood.450k)
pheno3 <- colData(FlowSorted.CordBloodNorway.450k)
dim(pheno1)
pheno1
table(pheno2$Sex)
pheno1
strsplit(pheno1$Sample_Name, split = "_")
sapply(strsplit(pheno1$Sample_Name, split = "_"), function(x) x[2])
table(sapply(strsplit(pheno1$Sample_Name, split = "_"), function(x) x[2])))
table(sapply(strsplit(pheno1$Sample_Name, split = "_"), function(x) x[2]))))
table(sapply(strsplit(pheno1$Sample_Name, split = "_"), function(x) x[2]))
pheno2
pheno2$Individual.ID
table(pheno2$Individual.ID)
pheno3
pheno3$SampleID
table(pheno3$SampleID)
dim(pheno1)
dim(pheno2)
dim(pheno3)
dim(pheno)
pheno = data.frame(cell.type = c(pheno1$CellType, as.character(pheno2$CellType), pheno3$CellType),
sex = c(pheno1$Sex, pheno2$Sex, pheno3$Sex),
ID = c(pheno1$SampleID, as.vector(pheno2$Individual.ID), pheno3$SampleID))
RGSET = Reduce(f = combineArrays, list(FlowSorted.Blood.450k, FlowSorted.CordBlood.450k, FlowSorted.CordBloodNorway.450k))
dim(pheno)
RGSET
library(UMtools)
setwd("/media/ben/DATA/Ben/1_evCpGs/data/aging_children/GSE104812_RAW/") # Change this route to fit your system
rgSet = read.metharray.exp(getwd(), extended = TRUE)
TypeI.Red <- getProbeInfo(rgSet, type = "I-Red")
TypeI.Green <- getProbeInfo(rgSet, type = "I-Green")
TypeII <- getProbeInfo(rgSet, type = "II")
ctrls <- getProbeInfo(rgSet, type = "Control")
SnpI <- getProbeInfo(rgSet, type = "SnpI")
SnpII <- getProbeInfo(rgSet, type = "SnpII")
known_probes = c(SnpI$AddressA, SnpI$AddressB, SnpII$AddressA, ctrls$Address, TypeI.Red$AddressA,
TypeI.Red$AddressB, TypeI.Green$AddressA, TypeI.Green$AddressB, TypeII$AddressA)
length(known_probes) # 621926
all = rownames(rgSet); length(known_probes) # 622399
orphan = all[!(all %in% known_probes)]; length(orphan) # 473
head(TypeI.Green[, 1:3], n = 2)
Grn = assay(rgSet, "Green")       # Green mean across beads
Red = assay(rgSet, "Red")         # Red mean across beads
GrnSD = assay(rgSet, "GreenSD")   # Green SD across beads
RedSD = assay(rgSet, "RedSD")     # Red SD across beads
nBeads = assay(rgSet, "NBeads")   # Number of Beads across probes
M_U = GR_to_UM(Red = Red, Grn = Grn, rgSet = rgSet, what = "Mean")
M_U_sd = GR_to_UM(Red = RedSD, Grn = GrnSD, rgSet = rgSet, what = "SD")
nBeads_cg = GR_to_UM(nBeads = nBeads, rgSet = rgSet, what = "NBeads")
# PEAK
M_U$M[1:3, 1:3]; M_U$U[1:3, 1:3]
M_U_sd$M[1:3, 1:3]; M_U_sd$U[1:3, 1:3]
nBeads_cg[1:3, 1:3]
offset = 100 # For numerical stability at low fluorescence intensities
beta_value = M_U$M/(M_U$M + M_U$U + offset)
offset = 1 # For numerical stability at low fluorescence intensities
M_value = log2((M_U$M + offset)/(M_U$U + offset))
rm(Grn, Red, GrnSD, RedSD, nBeads, nBeads_cg, M_value); gc()
setwd("/media/ben/DATA/Ben/3_genetic_artefacts/R-packages/test/") # Change this route to fit your system
export_bigmat(M_U$M, "M.txt", nThread = 4)
M = import_bigmat("2021-01-28_M.txt", nThread = 4)
setwd('/media/ben/DATA/Ben/1_evCpGs/data/aging_children/GSE104812_RAW/')
pheno_object <- getGEO('GSE104812', destdir=".", getGPL = FALSE)
pheno <- pheno_object[[1]]
pheno <- phenoData(pheno)
pheno <- pData(pheno)
pheno = data.frame(GEO_ID = as.character(rownames(pheno)),
sex = as.factor(pheno$`gender:ch1`),
age = as.numeric(pheno$`age (y):ch1`))
IDAT_IDs = sapply(strsplit(colnames(rgSet), split = "_"),function(x) x[1])
pheno <- pheno[match(pheno$GEO_ID, IDAT_IDs),] # Make sure samples in pheno are in the same order as in IDATs
## 6) Quickly importing phenotypes with GEOquery
library(GEOquery)
setwd('/media/ben/DATA/Ben/1_evCpGs/data/aging_children/GSE104812_RAW/')
pheno_object <- getGEO('GSE104812', destdir=".", getGPL = FALSE)
pheno <- pheno_object[[1]]
pheno <- phenoData(pheno)
pheno <- pData(pheno)
pheno = data.frame(GEO_ID = as.character(rownames(pheno)),
sex = as.factor(pheno$`gender:ch1`),
age = as.numeric(pheno$`age (y):ch1`))
IDAT_IDs = sapply(strsplit(colnames(rgSet), split = "_"),function(x) x[1])
pheno <- pheno[match(pheno$GEO_ID, IDAT_IDs),] # Make sure samples in pheno are in the same order as in IDATs
# Y-chromosome targeting probe
density_jitter_plot(beta_value, "cg00050873", pheno$sex)
annotation["cg00050873", c("chr", "pos")] # chrY   9363356
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00050873", sex = pheno$sex)
# X-inactivation
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg00026186", sex = pheno$sex)
annotation["cg00026186", c("chr", "pos")] # chrX  48367230
# X-inactivation escape
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg04927982", sex = pheno$sex)
# X-hypermethylation
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg02973417", sex = pheno$sex)
### Bivariate Gaussian Mixture Models (bGMMs)
set.seed(2); res = bGMM(M_U$M, M_U$U, "cg03398919", K = 2)
set.seed(3); res = bGMM(M_U$M, M_U$U, "cg00814218", K = 3)
set.seed(2); res = bGMM(M_U$M, M_U$U, "cg27024127", K = 4)
set.seed(4); res = bGMM(M_U$M, M_U$U, "cg23186955", K = 5)
### Quantifying epigenome-wide ambivalency in probe failure
CV = compute_CV(M_SD = M_U_sd$M, U_SD = M_U_sd$U, M = M_U$M, U = M_U_sd$U, alpha = 100)
BC_CV = compute_BC_CV(CV = CV)
density_jitter_plot(CV, "cg00050873", pheno$sex)
density_jitter_plot(CV, "cg00050873", pheno$sex)
BC_CV["cg00050873"]
# cg00050873
#   1.128555
annotation["cg00050873", c("chr", "pos")] # chrY   9363356
### K-calling
Kcall_CpG("cg15771735", M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG("cg03398919", M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG("cg00814218", M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG("cg27024127", M_U$M, M_U$U, minPts = 5, eps = 0.1)
chrY = rownames(annotation)[annotation$chr == "chrY"]
K_vec = par_EW_Kcalling(M_U$M[chrY,], M_U$U[chrY,], minPts = 5, eps = 0.1)
## 7) UMtools in action
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
annotation <- getAnnotation(IlluminaHumanMethylation450kanno.ilmn12.hg19)
Kcall_CpG("cg27024127", M_U$M, M_U$U, minPts = 5, eps = 0.1)
chrY = rownames(annotation)[annotation$chr == "chrY"]
K_vec = par_EW_Kcalling(M_U$M[chrY,], M_U$U[chrY,], minPts = 5, eps = 0.1)
table(K_vec)
# K = 1 are cross-reactive
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg02494853", sex = pheno$sex)
annotation["cg02494853", c("chr", "pos")] # chrY   4868397
data("training_set")
# If aiming to employ epigenome-wide, it is very important to adjust {minPts, eps} to the
# sample size of the data employed.
setwd("/home/ben/Documents/Git/UMtools/data/")
load("training_set.Rdata")
# Training annotated with dataset of 426 EUR MZ twin pairs. Training set may not be correctly annotated
# for other ancestries and other sample sizes.
Kcall_CpG(sample(training_set$k_1, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_2, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_2, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_2, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_3, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_3, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_3, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_3, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_3, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_3, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_3, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_3, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_3, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_3, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_4, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_4, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_4, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_4, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
Kcall_CpG(sample(training_set$k_4, 1), M_U$M, M_U$U, minPts = 5, eps = 0.1)
# Lower maf variants are wrongly annotated in this dataset. Sample size not big enough.
train_k_caller(M_U$M, M_U$U, training_set, 3, 0.07) # 0.7948261
# meQTL
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg14911689", sex = NULL)
annotation["cg14911689", c("chr", "pos", "UCSC_RefGene_Name")] # chr12    739980    NINJ2
annotation <- annotation[order(annotation$chr, annotation$pos),]
pos <- which(rownames(annotation) == "cg14911689")
UM_plot(M = M_U$M, U = M_U$U, CpG = rownames(annotation)[pos-1], sex = NULL)
UM_plot(M = M_U$M, U = M_U$U, CpG = rownames(annotation)[pos+1], sex = NULL)
# meQTL
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg14911689", sex = NULL)
UM_plot(M = M_U$M, U = M_U$U, CpG = rownames(annotation)[pos-1], sex = NULL)
UM_plot(M = M_U$M, U = M_U$U, CpG = rownames(annotation)[pos+1], sex = NULL)
res = Visualize_cometh(annotation = annotation, CpG = 'cg14911689', distance = 1000,
L_bound = 3, R_bound = 2, beta_mat = beta_value, max_y = 5)
# A genetic artefact
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg11495604", sex = NULL)
res = Visualize_cometh(annotation = annotation, CpG = 'cg11495604', distance = 1000,
L_bound = 0, R_bound = 2, beta_mat = beta_value, max_y = 5)
# HLA locus
res = Visualize_cometh(annotation = annotation, CpG = 'cg00211215', distance = 200,
L_bound = 3, R_bound = 0, beta_mat = beta_value, max_y = 5)
# A genetic artefact
UM_plot(M = M_U$M, U = M_U$U, CpG = "cg11495604", sex = NULL)
remove.packages("UMtools")
