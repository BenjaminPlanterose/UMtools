print(str(arg))
print(func)
print(arg)
}
## CASE 3 Used as a Parameter
tester_3(
x = 2,
y = 1,
z = default_arg()) # This would evaluate to 3
# For case 3
default_arg <- function(arg = NULL, func = NULL) {
if(is.null(arg) & is.null(func))
{
arg = sys.calls()[[1]]; print(arg)
val = as.character(arg); names(val) = names(arg)
func = val[1]; print(func)
variable = names(which(val == "default_arg()"))
}
if(is.null(func) & !(is.null(arg)))
{
func = as.character(sys.call(sys.parent()))[1]
}
formals(func)[[variable]]
print(str(arg))
print(func)
print(arg)
}
## CASE 3 Used as a Parameter
tester_3(
x = 2,
y = 1,
z = default_arg()) # This would evaluate to 3
# For case 3
default_arg <- function(arg = NULL, func = NULL) {
if(is.null(arg) & is.null(func))
{
arg = sys.calls()[[1]]; print(arg)
val = as.character(arg); names(val) = names(arg)
func = val[1]; print(func)
variable = names(which(val == "default_arg()"))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
## CASE 3 Used as a Parameter
tester_3(
x = 2,
y = 1,
z = default_arg()) # This would evaluate to 3
## CASE 3 Used as a Parameter
tester_1(
x = 2,
y = 1,
z = default_arg()) # This would evaluate to 3
# For case 3
default_arg <- function(arg = NULL, func = NULL) {
if(is.null(arg) & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
## CASE 1 Used With Explicit Arguments:
tester_1 <- function(x = 1, y = 2, z = 3) {
x * y + z
}
default_arg(x, tester_1) # this would evaluate to 1
## CASE 3 Used as a Parameter
tester_1(
x = 2,
y = 1,
z = default_arg()) # This would evaluate to 3
## CASE 2 Used Within a Function Body
tester_2 <- function(x = 1, y = 2, z = 3) {
x_default <- default_arg(x) # this would evaluate to 1
if(x < x_default) {
stop(paste("x should be greater or equal to default value:", x_default))
}
x * y + z
}
tester_2()
## CASE 1 Used With Explicit Arguments:
tester_1 <- function(x = 1, y = 2, z = 3) {
x * y + z
}
default_arg(x, tester_1) # this would evaluate to 1
deparse(substitute(x))
# For case 3
default_arg <- function(arg = NULL, func = NULL) {
print(is.null(arg))
print(is.null(func))
if(is.null(arg) & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
default_arg(x, tester_1) # this would evaluate to 1
deparse(substitute(NULL))
# For case 3
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
## CASE 1 Used With Explicit Arguments:
tester_1 <- function(x = 1, y = 2, z = 3) {
x * y + z
}
default_arg(x, tester_1) # this would evaluate to 1
default_arg(y, tester_1) # this would evaluate to 1
default_arg(z, tester_1) # this would evaluate to 1
## CASE 2 Used Within a Function Body
tester_2 <- function(x = 1, y = 2, z = 3) {
x_default <- default_arg(x) # this would evaluate to 1
if(x < x_default) {
stop(paste("x should be greater or equal to default value:", x_default))
}
x * y + z
}
tester_2()
## CASE 3 Used as a Parameter
tester_1(
x = 2,
y = 1,
z = default_arg()) # This would evaluate to 3
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1 <- function(x = 1, y = 2, z = 3) {
x * y + z
}
default_arg(x, tester_1) # this would evaluate to 1
default_arg(y, tester_1) # this would evaluate to 1
default_arg(z, tester_1) # this would evaluate to 1
tester_2
tester_2()
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1 <- function(x = 1, y = 2, z = 3){
x * y + z
}
tester_2 <- function(x = 1, y = 2, z = 3){
x_default <- default_arg(x) # this would evaluate to 1
if(x < x_default) {
stop(paste("x should be greater or equal to default value:", x_default))
}
x * y + z
}
default_arg(x, tester_1) # 1
default_arg(y, tester_1) # 2
default_arg(z, tester_1) # 3
tester_2()
tester_1(x = 2, y = 1, z = default_arg())
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1 <- function(x = 1, y = 2, z = 3){
x * y + z
}
tester_2 <- function(x = 1, y = 2, z = 3){
x_default <- default_arg(x) # this would evaluate to 1
if(x < x_default) {
stop(paste("x should be greater or equal to default value:", x_default))
}
x * y + z
}
default_arg(x, tester_1) # 1
default_arg(y, tester_1) # 2
default_arg(z, tester_1) # 3
tester_2() # 5
tester_1(x = 2, y = 1, z = default_arg()) # 5
tester_1(x = 2, y = 1, z = default_arg()) # 5
tester_1(x = 2, y = default_arg(), z = 3) # 5
tester_1(x = default_arg(), y = 1, z = 3) # 5
if(sum(c(x,y,z) != c(x_default, y_default, z_default))) {
stop(paste("x should be greater or equal to default value:", x_default))
}
if(sum(c(x,y,z) != c(x_default, y_default, z_default))) {
stop(paste("x should be greater or equal to default value:", x_default))
}
tester_2 <- function(x = 1, y = 2, z = 3){
x_default <- default_arg(x)
y_default <- default_arg(y)
z_default <- default_arg(z)
if(sum(c(x,y,z) != c(x_default, y_default, z_default))) {
stop(paste("x should be greater or equal to default value:", x_default))
}
x * y + z
}
tester_2() # 5
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]; message(func)
variable = names(which(val == "default_arg()")); message(variable)
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1(x = 2, y = 1, z = default_arg()) # 5
tester_1(x = 2, y = default_arg(), z = 3) # 5
tester_1(x = default_arg(), y = 1, z = 3) # 5
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]; message(func)
variable = names(which(val == "default_arg()")); message(variable)
message(formals(func))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
default_arg(x, tester_1) # 1
default_arg(y, tester_1) # 2
default_arg(z, tester_1) # 3
tester_2() # 5
tester_1(x = 2, y = 1, z = default_arg()) # 5
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]; print(func)
variable = names(which(val == "default_arg()")); print(variable)
print(formals(func))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1(x = 2, y = 1, z = default_arg()) # 5
tester_1(x = 2, y = default_arg(), z = 3) # 5
par = list(x = 1, y = 2, z = 3)
par[[x]]
par[["x"]]
par[["y"]]
par[["z"]]
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]; print(func)
variable = names(which(val == "default_arg()")); print(variable)
print(formals(func))
print(formals(func)[[variable]])
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1(x = 2, y = 1, z = default_arg()) # 5
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
print(formals(func)[[variable]])
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1(x = 2, y = 1, z = default_arg()) # 5
tester_1(x = 2, y = default_arg(), z = 3) # 5
tester_1(x = default_arg(), y = 1, z = 3) # 5
tester_1 <- function(x = 1, y = 2, z = 3){
print(list(x = x, y = y, z = z))
x * y + z
}
tester_1(x = 2, y = 1, z = default_arg()) # 5
tester_1(x = 2, y = default_arg(), z = 3) # 5
tester_1(x = 1, y = 2, z = default_arg()) # 5
tester_1(x = 1, y = default_arg(), z = 3) # 5
tester_1(x = default_arg(), y = 2, z = 3) # 5
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1 <- function(x = 1, y = 2, z = 3){
x * y + z
}
tester_2 <- function(x = 1, y = 2, z = 3){
x_default <- default_arg(x)
y_default <- default_arg(y)
z_default <- default_arg(z)
if(sum(c(x,y,z) != c(x_default, y_default, z_default))) {
stop(paste("x should be greater or equal to default value:", x_default))
}
x * y + z
}
default_arg(x, tester_1) # 1
default_arg(y, tester_1) # 2
default_arg(z, tester_1) # 3
tester_2() # 5
tester_1(x = 1, y = 2, z = default_arg()) # 5
tester_1(x = 1, y = default_arg(), z = 3) # 5
tester_1(x = default_arg(), y = 2, z = 3) # 5
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1 <- function(x = 1, y = 2, z = 3) {
x * y + z
}
tester_2 <- function(x = 1, y = 2, z = 3) {
x_default <- default_arg(x) # this would evaluate to 1
if(x < x_default) {
stop(paste("x should be greater or equal to default value:", x_default))
}
x * y + z
}
default_arg(x, tester_1) # 1
default_arg(y, tester_1) # 2
default_arg(z, tester_1) # 3
tester_2() # 5
tester_1(x = 1, y = 2, z = default_arg()) # 5
tester_1(x = 1, y = default_arg(), z = 3) # 5
tester_1(x = default_arg(), y = 2, z = 3) # 5
default_arg <- function(arg = NULL, func = NULL) {
if(deparse(substitute(arg)) == "NULL" & is.null(func))
{
arg = sys.calls()[[1]]
val = as.character(arg); names(val) = names(arg)
func = val[1]
variable = names(which(val == "default_arg()"))
return(formals(func)[[variable]])
}
if(is.null(func))
{
func = as.character(sys.call(sys.parent()))[1]
}
return(formals(func)[[deparse(substitute(arg))]])
}
tester_1 <- function(x = 1, y = 2, z = 3) {
x * y + z
}
default_arg(x, tester_1) # this would evaluate to 1
tester_2 <- function(x = 1, y = 2, z = 3) {
x_default <- default_arg(x) # this would evaluate to 1
if(x < x_default) {
stop(paste("x should be greater or equal to default value:", x_default))
}
x * y + z
}
tester_1 <- function(x = 1, y = 2, z = 3) {
x * y + z
}
tester_2 <- function(x = 1, y = 2, z = 3) {
x_default <- default_arg(x) # this would evaluate to 1
if(x < x_default) {
stop(paste("x should be greater or equal to default value:", x_default))
}
x * y + z
}
default_arg(x, tester_1) # 1
default_arg(y, tester_1) # 2
default_arg(z, tester_1) # 3
tester_2() # 5
tester_1(x = 1, y = 2, z = default_arg()) # 5
tester_1(x = 1, y = default_arg(), z = 3) # 5
tester_1(x = default_arg(), y = 2, z = 3) # 5
# annotated
setwd("/media/ben/DATA/Ben/3_genetic_artefacts/annotation/UMtools_dat/dat_450K/vcf/proc/")
probe_SNP = fread("probe_SNP.vcf"); probe_SNP = probe_SNP[extract.maf(probe_SNP$V8) > thr,]
library(data.table)
probe_SNP = fread("probe_SNP.vcf"); probe_SNP = probe_SNP[extract.maf(probe_SNP$V8) > thr,]
# SNP3: 3´-GCN-5’ G↔ A ↔ T	U/M Informative detection in the same channel
# SNP0: 5’-NCG-3’ T ↔ C ↔ A	U/M Informative detection in the same channel
probe_SBE_unaffected = unique(c(classification$I_minus_SNP3_A_G_T$cg,classification$I_plus_SNP0_A_C_T))
length(probe_SBE_unaffected) # 74
load(file = "classification_CpG_SNP_450K.RData")
setwd("/home/ben/Documents/Git/UMtools/data/")
load(file = "classification_CpG_SNP_450K.RData")
sum(sapply(classification, nrow)) # 7722
classification <- sort_class_by_maf(classification)
# SNP3: 3´-GCN-5’ G↔ A ↔ T	U/M Informative detection in the same channel
# SNP0: 5’-NCG-3’ T ↔ C ↔ A	U/M Informative detection in the same channel
probe_SBE_unaffected = unique(c(classification$I_minus_SNP3_A_G_T$cg,classification$I_plus_SNP0_A_C_T))
# SNP3: 3´-GCN-5’ G↔ A ↔ T	U/M Informative detection in the same channel
# SNP0: 5’-NCG-3’ T ↔ C ↔ A	U/M Informative detection in the same channel
probe_SBE_unaffected = unique(c(classification$I_minus_SNP3_A_G_T$cg,classification$I_plus_SNP0_A_C_T))
length(probe_SBE_unaffected) # 74
SBE_SNP = SBE_SNP[!(SBE_SNP %in% probe_SBE_unaffected),]
